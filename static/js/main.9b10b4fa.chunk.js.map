{"version":3,"sources":["Map.js","App.js","reportWebVitals.js","index.js"],"names":["Map","useState","lat","setLat","lon","setlon","useEffect","getLocation","navigator","geolocation","watchPosition","res","console","log","coords","longitude","err","alert","message","enableHighAccuracy","maximumAge","timeout","MapContainer","style","height","width","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","Popup","require","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAkDeA,G,MA/CH,WACV,MAAsBC,mBAAS,oBAAmB,mBAA3CC,EAAG,KAAEC,EAAM,KAClB,EAAsBF,mBAAS,mBAAkB,mBAA1CG,EAAG,KAAEC,EAAM,KAClBC,qBAAU,WACRC,GACF,GAAG,IAGH,IAAMA,EAAc,WAClB,OAAOC,UAAUC,YAAYC,eAAc,SAACC,GACxCC,QAAQC,IAAIF,GACZR,EAAOQ,EAAIG,OAAOC,WAClBV,EAAOM,EAAIG,OAAOC,UACtB,IAAG,SAACC,GACAJ,QAAQC,IAAIG,GACXC,MAAMD,EAAIE,QACf,GAAG,CACDC,oBAAoB,EACpBC,WAAY,IACZC,QAAS,KAEb,EAGA,OACE,8BACE,eAACC,EAAA,EAAY,CACXC,MAAO,CAAEC,OAAQ,QAASC,MAAO,SACjCC,OAAQ,CAACxB,EAAIE,GACbuB,KAAM,GACNC,iBAAiB,EAAM,UAEvB,cAACC,EAAA,EAAS,CACRC,YAAY,wFACZC,IAAI,uDAEN,cAACC,EAAA,EAAM,CAACC,SAAU,CAAC/B,EAAIE,GAAK,SAC1B,eAAC8B,EAAA,EAAK,WAAC,wBACgB,uBAAM,iCAOvC,G,MC5CaC,EAAQ,IAmBNC,MAjBf,WAEE,OACE,8BASA,cAAC,EAAG,KAGR,ECTeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECJAQ,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,SAM1Bb,G","file":"static/js/main.9b10b4fa.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Marker, MapContainer, Popup, TileLayer, useMapEvents, useMap } from \"react-leaflet\";\r\n\r\nconst Map = () => {\r\n  const [lat, setLat] = useState(32.168143114188624);\r\n  const [lon, setlon] = useState(35.23642820541842);\r\n  useEffect(() => {\r\n    getLocation();\r\n  }, []);\r\n\r\n \r\n  const getLocation = () => {\r\n    return navigator.geolocation.watchPosition((res)=>{\r\n        console.log(res)      \r\n        setLat(res.coords.longitude)\r\n        setlon(res.coords.longitude)\r\n    }, (err)=>{\r\n        console.log(err)\r\n         alert(err.message)\r\n    }, {\r\n      enableHighAccuracy: true,\r\n      maximumAge: 10000,\r\n      timeout: 10000,\r\n    });\r\n  };\r\n\r\n   let position = [32.168143114188624, 35.23642820541842];\r\n  return (\r\n    <div>\r\n      <MapContainer\r\n        style={{ height: \"100vh\", width: \"100wh\" }}\r\n        center={[lat,lon]}\r\n        zoom={15}\r\n        scrollWheelZoom={false}\r\n      >\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        <Marker position={[lat,lon]} >\r\n          <Popup>\r\n            A pretty CSS3 popup. <br /> Easily customizable.\r\n          </Popup>\r\n        </Marker>\r\n        {/* <LocationMarker /> */}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n\r\nfunction LocationMarker() {\r\n        const [position, setPosition] = useState(null)\r\n        const map = useMapEvents({\r\n          click() {\r\n            map.locate()\r\n          },\r\n          locationfound(e) {\r\n            setPosition(e.latlng)\r\n            map.flyTo(e.latlng, map.getZoom())\r\n          },\r\n        })\r\n\r\n\r\n        return position === null ? null : (\r\n          <Marker position={position}>\r\n            <Popup>You are here</Popup>\r\n          </Marker>\r\n        )\r\n      }","import { Route, Switch, Routes, Router } from \"react-router-dom\";\r\nimport JsQr from \"./JsQr\";\r\nimport Map from \"./Map\";\r\nimport Layout from \"./Layot\";\r\nconst tiny = require(\"@ahuvia/tiny\");\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <div>\r\n   \r\n        {/* <Switch>\r\n      <Router history={}>\r\n        <Route path=\"/\" element={<Layout />}/>\r\n          <Route path=\"Map\" element={<Map />} />\r\n          <Route path=\"JsQr\" element={<JsQr />} />\r\n      </Router>\r\n        </Switch> */}\r\n    <Map/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}