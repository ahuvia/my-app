{"version":3,"sources":["camera/ScanQr.tsx","zxingBrower.tsx","App.js","reportWebVitals.js","index.js"],"names":["require","ScanQr","ZxingBrower","useState","result","setresult","useEffect","aw","a","BrowserQRCodeReader","decodeFromVideoDevice","undefined","err","console","log","id","width","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAOiBA,EAAQ,K,OAyEVC,I,QC7EA,SAASC,IAAe,IAAD,EACRC,mBAAS,gBADD,mBAC7BC,EAD6B,KACrBC,EADqB,KAGpCC,qBAAU,WACRC,MACC,IACH,IAAMA,EAAE,uCAAG,sBAAAC,EAAA,uDACU,IAAIC,uBAMVC,2BAAsBC,EAAW,MAAM,SAACP,EAAQQ,GACvDR,IAEFS,QAAQC,IAAI,iBAAkBV,GAC9BC,EAAUD,OAXL,2CAAH,qDAeR,OACE,gCACI,8BACF,uBAAOW,GAAG,KAAKC,MAAM,UAGpBZ,KCrBMJ,EAAQ,KAyCNiB,MAvCf,WAAgB,IAAD,EACWd,mBAAS,aADpB,mBASb,OATa,UAUX,8BAYJ,cAACD,EAAD,OCrBegB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0820591e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./scanQrStyle.css\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// import { GPS } from \"helpers/types\";\r\n\r\nimport BarcodeScannerAndSelection from \"./BarcodeScannerAndSelection\";\r\nimport { DecodeHintType, BrowserMultiFormatReader } from \"@zxing/library\";\r\nconst QrReader = require(\"react-qr-reader\");\r\n\r\nfunction ScanQr(): any {\r\n  const [result, setResult] = useState<string | null>(\"\");\r\n  // const [gps, setGPS] = useState<GPS>({ lat: 0, lon: 0 });\r\n  const [scannedValue, setScannedValue] = useState<string>(\"\");\r\n  const deley = 100;\r\n  // const history = useHistory();\r\n  const hints = new Map();\r\n\r\n  const formats = Array.from(Array(17).keys());\r\n  hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\r\n  let codeReader: BrowserMultiFormatReader = new BrowserMultiFormatReader(\r\n    hints\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   navigator.geolocation.getCurrentPosition(function (position) {\r\n  //     setGPS({\r\n  //       lat: position.coords.latitude,\r\n  //       lon: position.coords.longitude,\r\n  //     });\r\n  //   });\r\n  // }, []);\r\n\r\n  const handleError = (err: any) => {\r\n    console.error(err);\r\n  };\r\n\r\n  const handleScan = (data: string) => {\r\n    if (data !== null) {\r\n      setResult(data);\r\n      console.log(\"good\");\r\n      // history.push({\r\n      //   pathname: \"/destination\",\r\n      //   // search: '?query=abc',\r\n      //   // state: { gps: gps },\r\n      // });\r\n    } else console.log(\"trying\");\r\n  };\r\n  const previewStyle = {\r\n    width: 250,\r\n    display: \"inline-block\",\r\n    marginTop: \"0.7rem\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"scan-qr\">\r\n      <h1 className=\"title\">סרקו את קוד ה - QR</h1>\r\n      <h2 className=\"description\">קוד הQR נמצא באמצעי התחבורה עליו עליתם</h2>\r\n      {/* <div className=\"corner\">\r\n        <QrReader\r\n          delay={deley}\r\n          style={previewStyle}\r\n          onError={handleError}\r\n          onScan={handleScan}\r\n          showViewFinder={false}\r\n        />\r\n      </div> */}\r\n      <BarcodeScannerAndSelection\r\n        codeReader={codeReader}\r\n        setSacanVal={(val: string) => {\r\n          console.log(val);\r\n          setScannedValue(val);\r\n          handleScan(val);\r\n        }}\r\n      />\r\n      <p>{result}</p>\r\n      <h2 className=\"help\">לחצו כאן לעזרה</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScanQr;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { BrowserQRCodeReader } from \"@zxing/browser\";\r\n\r\nexport default function ZxingBrower() {\r\n  const [result, setresult] = useState(\"initialState\");\r\n\r\n  useEffect(() => {\r\n    aw();\r\n  }, []);\r\n  const aw = async () => {\r\n    const codeReader = new BrowserQRCodeReader();\r\n    // const videoInputDevices = await BrowserQRCodeReader.listVideoInputDevices();\r\n    // console.log(videoInputDevices);\r\n  \r\n    // const selectedDeviceId = videoInputDevices[0].deviceId;\r\n    // alert(selectedDeviceId);\r\n      codeReader.decodeFromVideoDevice(undefined, \"vi\", (result, err) => {\r\n      if (result) {\r\n        // properly decoded qr code\r\n        console.log(\"Found QR code!\", result);\r\n        setresult(result);\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n        <div>\r\n      <video id=\"vi\" width=\"300\" ></video>\r\n        </div>\r\n\r\n      {result}\r\n    </div>\r\n  );\r\n}\r\n","import { useRef, useState } from \"react\";\r\nimport QrReader from \"react-scan-qr\";\r\n// import { useTorchLight } from \"@blackbox-vision/use-torch-light\";\r\n// import Torch from \"./Torch\";\r\nimport ScanQr from \"./camera/ScanQr\";\r\nimport \"./icon.css\";\r\n// import BarcodeScannerComponent from \"react-webcam-barcode-scanner2\";\r\nimport React from \"react\";\r\nimport ZxingBrower from \"./zxingBrower\";\r\nconst tiny = require(\"@ahuvia/tiny\");\r\n\r\nfunction App() {\r\n  const [data, setData] = useState(\"Not Found\");\r\n\r\n  const handleError = (err) => {\r\n    console.error(err);\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <div>\r\n  \r\n      {/* {tiny(\"אהוביה שני\")} */}\r\n      {/* <ScanQr /> */}\r\n      {/* <Torch /> */}\r\n      {/* <QrReader\r\n        delay={300}\r\n        onScan={(data) => setData(data)}\r\n        onError={handleError(data)}\r\n        style={{ width: \"90%\" }}\r\n      />\r\n      {data} */}\r\n<ZxingBrower/>\r\n      {/* <button onClick={toggle}>{on ? \"Disable Torch\" : \"Enable Torch\"}</button> */}\r\n      {/* <p>{JSON.stringify(data, null, 2)}</p>\r\n      <p>{JSON.stringify(error, null, 2)}</p> */}\r\n      {/* <BarcodeScannerComponent\r\n        width={500}\r\n        height={500}\r\n        onUpdate={(err, result) => {\r\n          if (result) setData(result.text);\r\n          else setData(\"Not Found\");\r\n        }}\r\n      />\r\n      // <p>{data}</p> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}