{"version":3,"sources":["Torch2.js","App.js","reportWebVitals.js","index.js"],"names":["Torch2","onClick","that","this","mediaStreamTrack","$refs","video","srcObject","getVideoTracks","window","ImageCapture","getPhotoCapabilities","then","tourch","applyConstraints","advanced","torch","App","streamRef","useRef","useState","useTorchLight","current","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MA4BeA,MA1Bf,WAmBE,OACE,8BACE,wBAAQC,QApBZ,WACE,IAAIC,EAAOC,KACLC,EAAmBD,KAAKE,MAAMC,MAAMC,UAAUC,iBAAiB,GAChD,IAAIC,OAAOC,aAAaN,GAChCO,uBAAuBC,MAAK,YACnB,IAAhBV,EAAKW,QACPX,EAAKW,QAAS,EACdT,EAAiBU,iBAAiB,CAChCC,SAAU,CAAC,CAAEC,OAAO,QAEG,IAAhBd,EAAKW,SACdX,EAAKW,QAAS,EACdT,EAAiBU,iBAAiB,CAChCC,SAAU,CAAC,CAAEC,OAAO,WAOxB,sBCaSC,MA9Bf,WACE,IAAMC,EAAYC,iBAAO,MADZ,EAGaC,mBAAS,MAHtB,gCAIWA,mBAAS,cAJpB,gCAMQC,YAAcH,EAAUI,UANhC,mBAYb,OAZa,UAaX,mCACE,cAAC,EAAD,OCRSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.06c5f23f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Torch2() {\r\n  function toggleFlash() {\r\n    let that = this;\r\n    const mediaStreamTrack = this.$refs.video.srcObject.getVideoTracks()[0];\r\n    const imageCapture = new window.ImageCapture(mediaStreamTrack);\r\n    imageCapture.getPhotoCapabilities().then(() => {\r\n      if (that.tourch === false) {\r\n        that.tourch = true;\r\n        mediaStreamTrack.applyConstraints({\r\n          advanced: [{ torch: true }],\r\n        });\r\n      } else if (that.tourch === true) {\r\n        that.tourch = false;\r\n        mediaStreamTrack.applyConstraints({\r\n          advanced: [{ torch: false }],\r\n        });\r\n      }\r\n    });\r\n  }\r\n  return (\r\n    <div>\r\n      <button onClick={toggleFlash}>flash</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Torch2;\r\n","import { useRef, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport { useTorchLight } from \"@blackbox-vision/use-torch-light\";\nimport Troch from \"./Troch\";\nimport Torch2 from \"./Torch2\";\n\nfunction App() {\n  const streamRef = useRef(null);\n\n  const [error, setError] = useState(null);\n  const [data, setData] = useState(\"No result\");\n\n  const [on, toggle] = useTorchLight(streamRef.current);\n\n  const setRef = ({ stream }) => {\n    streamRef.current = stream;\n  };\n\n  return (\n    <>\n      <Torch2 />\n      {/* <Troch /> */}\n      {/* לא עובד\n      <QrReader\n        onLoad={setRef}\n        onScan={setData}\n        onError={setError}\n        style={{ width: \"100%\" }}\n      /> */}\n      {/* <button onClick={toggle}>{on ? \"Disable Torch\" : \"Enable Torch\"}</button>\n      <p>{JSON.stringify(data, null, 2)}</p>\n      <p>{JSON.stringify(error, null, 2)}</p> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}