{"version":3,"sources":["ReactQrScanner.js","JsQr.tsx","camera/ScanQr.tsx","App.js","reportWebVitals.js","index.js"],"names":["ReactQrScanner","useState","result","setresult","delay","style","height","width","facingMode","onError","err","console","error","handleError","showViewFinder","onScan","res","log","JsQr","torch","setTorch","setqr","captureArea","useEffect","webcam","a","constraints","video","zoom","optimizationMode","frameRate","advanced","navigator","mediaDevices","getUserMedia","mediaStream","track","getVideoTracks","getSettings","videoTag","document","getElementById","autoplay","setAttribute","srcObject","state","applyConstraints","imageCapture","ImageCapture","getPhotoCapabilities","then","querySelector","addEventListener","canvasTag","createElement","setInterval","getContext","drawImage","window","screen","imageData","getImageData","data","qrCode","jsQR","stop","textAlign","id","className","require","App","isJsQr","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f9055657.chunk.js","sourcesContent":["import React, { Component, useState } from \"react\";\r\nimport QrReader from \"react-qr-reader\";\r\n\r\nexport default function ReactQrScanner() {\r\n  const [delay, setdelay] = useState(100);\r\n  const [result, setresult] = useState(\"\");\r\n  const rear = 'rear'\r\n  const handleError = (err)=>{\r\n      console.error(err)\r\n  }\r\n  const previewStyle = {\r\n    height: 240,\r\n    width: 240,\r\n  }\r\n  const constraints = {vidoe:{facingMode:\"environment\"}}\r\n  return (\r\n    <div>\r\n      <h3>React-qr-acanner</h3>\r\n      <QrReader\r\n        delay={1}\r\n        style={previewStyle}\r\n        facingMode='environment'\r\n        // constraints={constraints}\r\n        onError={(err)=>handleError(err)}\r\n        showViewFinder={false}\r\n        onScan={(res) => {\r\n          console.log(res)\r\n           if(res)\r\n           setresult(res)\r\n        }}\r\n      />\r\n     <div>\r\n       <br></br>\r\n       <br></br>\r\n       <br></br>\r\n     <p>{result}u</p>\r\n      <div>sss</div>\r\n     </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport jsQR from \"jsqr\";\r\nexport default function JsQr() {\r\n  const [torch, setTorch] = useState(false)\r\n  const [qr, setqr] = useState(\"\");\r\n  const captureArea = {\r\n    x: 1,\r\n    y: 1,\r\n    width: 289,\r\n    height: 289,\r\n  };\r\n  useEffect(() => {\r\n    webcam();\r\n  }, []);\r\n\r\n  const webcam = async () => {\r\n    const constraints = {\r\n      video: { \r\n        facingMode: ( \"environment\"? \"environment\": \"user\"),\r\n         zoom: 2.0,\r\n         width: 700,//{ min: 1024, ideal: 1280, max: 1920 },\r\n         height: 700,// { min: 576, ideal: 720, max: 1080 },\r\n      optimizationMode:'detail',\r\n      frameRate: 90},\r\n      advanced: [{torch: torch}]\r\n    };\r\n\r\n    const mediaStream = await navigator.mediaDevices.getUserMedia(constraints);\r\n    const track = mediaStream.getVideoTracks()[0];\r\n    console.log( track.getSettings())\r\n    \r\n    const videoTag = document.getElementById(\"videoo\") as HTMLVideoElement;\r\n    videoTag.autoplay = true;\r\n    // videoTag.height = 290;\r\n    // videoTag.width = 290;\r\n    videoTag.setAttribute(\"autoplay\", \"\");\r\n    videoTag.setAttribute(\"muted\", \"\");\r\n    videoTag.setAttribute(\"playsinline\", \"\");\r\n    // if (\"srcObject\" in videoTag) {\r\n    videoTag.srcObject = mediaStream;\r\n    \r\n    const offOn =()=>{\r\n      let state = false;\r\n      state = !state;\r\n      //@ts-ignore\r\n         document.getElementById('video').srcObject.getVideoTracks()[0].applyConstraints({ advanced: [{ torch: state }] });\r\n    }\r\n  \r\n   //@ts-ignore\r\n   const imageCapture = new ImageCapture(track);\r\n   const photoCapabilities = imageCapture\r\n     .getPhotoCapabilities()\r\n     .then(() => { let state = false;\r\n      //let there be light!\r\n      const btn = document.querySelector(\".switch\") as HTMLElement;\r\n      btn.addEventListener(\"click\", function () {\r\n        state = !state;\r\n         //@ts-ignore\r\n        // document.getElementById('video').srcObject.getVideoTracks()[0].applyConstraints({ advanced: [{ torch: state }] });\r\n      setTorch(!torch)\r\n        track.applyConstraints({\r\n          //@ts-ignore\r\n          advanced: [{ torch: state }],\r\n        });\r\n      });\r\n    });\r\n  // track.applyConstraints({\r\n  //    //@ts-ignore\r\n  //    advanced: [{ torch: torch }],\r\n  //  });\r\n  \r\n \r\n    // } else {\r\n    //   videoTag.src = URL.createObjectURL(mediaStream);\r\n    // }\r\n\r\n    // const canvasTag = document.getElementById(\"canvass\");\r\n    var canvasTag = document.createElement(\"canvas\");\r\n    canvasTag.width = 350;\r\n    canvasTag.height = 350;\r\n    setInterval(() => {\r\n      let ctx = canvasTag.getContext(\"2d\")!;\r\n      //   console.log(window.screen.width,window.screen.height)\r\n      // console.log(window.screen.width/100*80,1,window.screen.height/100*50)\r\n      ctx.drawImage(\r\n        videoTag,\r\n        0,\r\n        0,\r\n        (window.screen.width / 100) * 80,\r\n        (window.screen.width / 100) * 80\r\n      );\r\n      // ctx.drawImage(videoTag, 1, 1, 349, 349);\r\n      // ctx.strokeStyle = \"red\";\r\n\r\n      // ctx.strokeRect(\r\n      //   captureArea.x,\r\n      //   captureArea.y,\r\n      //   captureArea.width,\r\n      //   captureArea.height\r\n      // );\r\n    // }, 100);\r\n\r\n    // setInterval(() => {\r\n      let imageData = canvasTag\r\n        .getContext(\"2d\")!\r\n        .getImageData(\r\n          captureArea.x,\r\n          captureArea.y,\r\n          captureArea.width,\r\n          captureArea.height\r\n        ).data;\r\n\r\n      // parsing qr code from canvas\r\n      const qrCode = jsQR(imageData, captureArea.width, captureArea.height);\r\n\r\n      if (qrCode) {\r\n        console.log(qrCode);\r\n        setqr(qrCode.data);\r\n        mediaStream.getVideoTracks()[0].stop();\r\n        // mediaStream.getTracks().forEach(track => track.stop())\r\n      }\r\n    }, 100);\r\n  };\r\n\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <h3>JSQR</h3>\r\n      <video id=\"videoo\"\r\n       style={{ width: \"auto\" }}\r\n       ></video>\r\n       <button  className=\"switch\" >פנסס</button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./scanQrStyle.css\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// import { GPS } from \"helpers/types\";\r\n\r\nimport BarcodeScannerAndSelection from \"./BarcodeScannerAndSelection\";\r\nimport { DecodeHintType, BrowserMultiFormatReader } from \"@zxing/library\";\r\nconst QrReader = require(\"react-qr-reader\");\r\n\r\nfunction ScanQr(): any {\r\n  const [result, setResult] = useState<string | null>(\"\");\r\n  // const [gps, setGPS] = useState<GPS>({ lat: 0, lon: 0 });\r\n  const [scannedValue, setScannedValue] = useState<string>(\"\");\r\n  const deley = 100;\r\n  // const history = useHistory();\r\n  const hints = new Map();\r\n\r\n  const formats = Array.from(Array(17).keys());\r\n  hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\r\n  let codeReader: BrowserMultiFormatReader = new BrowserMultiFormatReader(\r\n    hints\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   navigator.geolocation.getCurrentPosition(function (position) {\r\n  //     setGPS({\r\n  //       lat: position.coords.latitude,\r\n  //       lon: position.coords.longitude,\r\n  //     });\r\n  //   });\r\n  // }, []);\r\n\r\n  const handleError = (err: any) => {\r\n    console.error(err);\r\n  };\r\n\r\n  const handleScan = (data: string) => {\r\n    if (data !== null) {\r\n      setResult(data);\r\n      console.log(\"good\");\r\n      // history.push({\r\n      //   pathname: \"/destination\",\r\n      //   // search: '?query=abc',\r\n      //   // state: { gps: gps },\r\n      // });\r\n    } else console.log(\"trying\");\r\n  };\r\n  const previewStyle = {\r\n    width: 250,\r\n    display: \"inline-block\",\r\n    marginTop: \"0.7rem\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"scan-qr\">\r\n      <h1 className=\"title\">סרקו את קוד ה - QR</h1>\r\n      <h2 className=\"description\">קוד הQR נמצא באמצעי התחבורה עליו עליתם</h2>\r\n      {/* <div className=\"corner\">\r\n        <QrReader\r\n          delay={deley}\r\n          style={previewStyle}\r\n          onError={handleError}\r\n          onScan={handleScan}\r\n          showViewFinder={false}\r\n        />\r\n      </div> */}\r\n      <BarcodeScannerAndSelection\r\n        codeReader={codeReader}\r\n        setSacanVal={(val: string) => {\r\n          console.log(val);\r\n          setScannedValue(val);\r\n          handleScan(val);\r\n        }}\r\n      />\r\n      <p>{result}</p>\r\n      <h2 className=\"help\">לחצו כאן לעזרה</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScanQr;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport QrReader from \"react-scan-qr\";\r\nimport ReactQrScanner from \"./ReactQrScanner\";\r\nimport jsQR from \"jsqr\";\r\nimport JsQr from \"./JsQr\";\r\nimport JsQR2 from \"./jsQR2\";\r\n// import { useTorchLight } from \"@blackbox-vision/use-torch-light\";\r\nimport Torch2 from \"./Torch2\";\r\nimport ScanQr from \"./camera/ScanQr\";\r\nimport \"./icon.css\";\r\n// import BarcodeScannerComponent from \"react-webcam-barcode-scanner2\";\r\nimport React from \"react\";\r\nimport ZxingBrower from \"./zxingBrower\";\r\nimport Camera from \"./Camera\";\r\nconst tiny = require(\"@ahuvia/tiny\");\r\n\r\nfunction App() {\r\n  const [data, setData] = useState(\"Not Found\");\r\n  const [isJsQr, setIsJsQr] = useState(jsQR? true: false)\r\n\r\n  const handleError = (err) => {\r\n    console.error(err);\r\n  };\r\n  const width = 400;\r\n  const height = 400;\r\n  const tryy = async () => {\r\n    // var video = document.querySelector(\"#videoElement\");\r\n    const mediaStream = await navigator.mediaDevices.getUserMedia({\r\n      video: { facingMode: \"environment\", frameRate: { ideal: 24, max: 30 } },\r\n    });\r\n    // const video = document.createElement(\"video\");\r\n    const video = document.getElementById(\"vid\");\r\n\r\n    if (\"srcObject\" in video) {\r\n      video.srcObject = mediaStream;\r\n    } else {\r\n      video.src = URL.createObjectURL(mediaStream);\r\n    }\r\n\r\n    const currentDiv = document.getElementById(\"div1\");\r\n    video.autoplay = true;\r\n    // currentDiv.appendChild(video);\r\n  };\r\n\r\n  const canvas = () => {\r\n    var canvas = document.getElementById(\"canvas\");\r\n    var ctx = canvas.getContext(\"2d\");\r\n    var video = document.getElementById(\"vid\");\r\n\r\n    // set canvas size = video size when known\r\n    video.addEventListener(\"loadedmetadata\", function () {\r\n      canvas.width = video.videoWidth;\r\n      canvas.height = video.videoHeight;\r\n    });\r\n\r\n    video.addEventListener(\r\n      \"play\",\r\n      function () {\r\n        var $this = this; //cache\r\n        (function loop() {\r\n          if (!$this.paused && !$this.ended) {\r\n            ctx.drawImage($this, 0, 0);\r\n            setTimeout(loop, 1000 / 30); // drawing at 30fps\r\n          }\r\n        })();\r\n      },\r\n      0\r\n    );\r\n  };\r\n\r\n//   if(jsQR){\r\n// setIsJsQr(true)\r\n//   }\r\n  useEffect(() => {\r\n    // tryy();\r\n    // canvas();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      {isJsQr?(<JsQr />):(<ReactQrScanner/>)}\r\n      {/* <Camera /> */}\r\n      {/* <ReactQrScanner/> */}\r\n      {/* <JsQr /> */}\r\n      {/* <JsQR2/> */}\r\n      <div id=\"div1\"></div>\r\n      {/* <video\r\n        style={{ width: \"500px\", height: \"375px\", backgroundColor: \"#666\" }}\r\n        autoPlay={true}\r\n        id=\"vid\"\r\n      ></video> */}\r\n\r\n      <div id=\"theater\">\r\n        {/* <video\r\n          id=\"video\"\r\n          src=\"http://upload.wikimedia.org/wikipedia/commons/7/79/Big_Buck_Bunny_small.ogv\"\r\n          controls=\"false\"\r\n        ></video> */}\r\n        <canvas\r\n          id=\"canvas\"\r\n          // src=\"http://upload.wikimedia.org/wikipedia/commons/7/79/Big_Buck_Bunny_small.ogv\"\r\n          // controls=\"false\"\r\n        ></canvas>\r\n        <label>\r\n          <br />\r\n          Try to play me :)\r\n        </label>\r\n        <br />\r\n      </div>\r\n      {/* {tiny(\"אהוביה שני\")} */}\r\n      {/* <ScanQr /> */}\r\n      {/* <Torch2 /> */}\r\n      {/* <QrReader\r\n        delay={300}\r\n        onScan={(data) => setData(data)}\r\n        onError={handleError(data)}\r\n        style={{ width: \"90%\" }}\r\n      />\r\n      {data} */}\r\n      {/* <ZxingBrower/> */}\r\n      {/* <button onClick={toggle}>{on ? \"Disable Torch\" : \"Enable Torch\"}</button> */}\r\n      {/* <p>{JSON.stringify(data, null, 2)}</p>\r\n      <p>{JSON.stringify(error, null, 2)}</p> */}\r\n      {/* <BarcodeScannerComponent\r\n        width={500}\r\n        height={500}\r\n        onUpdate={(err, result) => {\r\n          if (result) setData(result.text);\r\n          else setData(\"Not Found\");\r\n        }}\r\n      />\r\n      // <p>{data}</p> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}