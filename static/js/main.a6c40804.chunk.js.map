{"version":3,"sources":["Torch.js","camera/BarcodeScannerAndSelection.tsx","camera/ScanQr.tsx","App.js","reportWebVitals.js","index.js"],"names":["Torch","BarcodeScannerAndSelection","props","React","useState","selectedDeviceId","setselectedDeviceId","selectedDevices","setselectedDevices","isScanDialogOpen","setIsScanDialogOpen","useEffect","a","codeReader","listVideoInputDevices","then","val","map","elem","deviceId","console","log","decodeFromVideoDevice","result","err","setSacanVal","toString","reset","fetch","style","textAlign","id","width","height","onClick","e","Dialog","open","onClose","aria-labelledby","FormControl","variant","Select","labelId","lang","value","onChange","event","target","device","index","MenuItem","require","ScanQr","setResult","setScannedValue","hints","Map","formats","Array","from","keys","set","DecodeHintType","POSSIBLE_FORMATS","BrowserMultiFormatReader","className","data","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6c40804.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Torch() {\r\n  //Test browser support\r\n  const SUPPORTS_MEDIA_DEVICES = \"mediaDevices\" in navigator;\r\n  const [isOn, setIsOn] = useState(false);\r\n\r\n  if (SUPPORTS_MEDIA_DEVICES) {\r\n    //Get the environment camera (usually the second one)\r\n    navigator.mediaDevices.enumerateDevices().then((devices) => {\r\n      const cameras = devices.filter((device) => device.kind === \"videoinput\");\r\n\r\n      if (cameras.length === 0) {\r\n        throw \"No camera found on this device.\";\r\n      }\r\n      const camera = cameras[cameras.length - 1];\r\n\r\n      // Create stream and get video track\r\n      navigator.mediaDevices\r\n        .getUserMedia({\r\n          video: {\r\n            deviceId: camera.deviceId,\r\n            facingMode: [\"user\", \"environment\"],\r\n            height: { ideal: 1080 },\r\n            width: { ideal: 1920 },\r\n          },\r\n        })\r\n        .then((stream) => {\r\n          const track = stream.getVideoTracks()[0];\r\n\r\n          //Create image capture object and get camera capabilities\r\n          const imageCapture = new ImageCapture(track);\r\n          const photoCapabilities = imageCapture\r\n            .getPhotoCapabilities()\r\n            .then(() => {\r\n              // //todo: check if camera has a torch\r\n              // // if (isOn) {\r\n              // //   //let there be light!\r\n              // //   setIsOn(false);\r\n              // //   const btn = document.querySelector(\".switch\");\r\n              // //   btn.addEventListener(\"click\", function () {\r\n              // //     track.applyConstraints({\r\n              // //       advanced: [{ torch: false }],\r\n              // //     });\r\n              // //   });\r\n              // // } else {\r\n              // //   //let there be light!\r\n              // //   setIsOn(true);\r\n              // //   const btn = document.querySelector(\".switch\");\r\n              // //   btn.addEventListener(\"click\", function () {\r\n              // //     track.applyConstraints({\r\n              // //       advanced: [{ torch: true }],\r\n              // //     });\r\n              // //   });\r\n              // // }\r\n              //let there be light!\r\n              // const btn = document.querySelector(\".switch\");\r\n              // btn.addEventListener(\"click\", function () {\r\n              //   track.applyConstraints({\r\n              //     advanced: [{ torch: true }],\r\n              //   });\r\n              // });\r\n              //todo: check if camera has a torch\r\n              let state = false;\r\n              //let there be light!\r\n              const btn = document.querySelector(\".switch\");\r\n              btn.addEventListener(\"click\", function () {\r\n                state = !state;\r\n                track.applyConstraints({\r\n                  advanced: [{ torch: state }],\r\n                });\r\n              });\r\n            });\r\n        });\r\n    });\r\n\r\n    //The light will be on as long the track exists\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"switch\">On / Off</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Torch;\r\n","import { Select, MenuItem, FormControl, Dialog } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { DecodeHintType, BrowserMultiFormatReader } from \"@zxing/library\";\r\n// yimport ReactDOM from \"react-dom\";\r\nimport axios from \"axios\";\r\n\r\ninterface IBarcodeScannerProps {\r\n  codeReader: BrowserMultiFormatReader;\r\n  setSacanVal: (val: string) => void;\r\n}\r\n\r\nfunction BarcodeScannerAndSelection(props: IBarcodeScannerProps) {\r\n  const [selectedDeviceId, setselectedDeviceId] = React.useState(\"\");\r\n  const [selectedDevices, setselectedDevices] = React.useState([\"\"]);\r\n  const [isScanDialogOpen, setIsScanDialogOpen] = useState(false);\r\n  const [indexCanera, setIndexCanera] = useState(\"\");\r\n\r\n  const getIndexCamera = async () => {\r\n    const index = await (\r\n      await axios.get(\r\n        `${process.env.REACT_APP_API_URL}passengers/checkPassenger/123456788`\r\n      )\r\n    ).data;\r\n    console.log(index[0].idCamera);\r\n    setIndexCanera(index[0].idCamera);\r\n    return index[0].idCamera;\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function fetch() {\r\n      await props.codeReader.listVideoInputDevices().then(async (val) => {\r\n        setselectedDevices(val.map((elem) => elem.deviceId));\r\n        console.log(val);\r\n        setselectedDeviceId(val[0].deviceId);\r\n        // console.log(\"deviceId\", val[0].deviceId, \"deviceId\", val[1].deviceId);\r\n      });\r\n\r\n      await props.codeReader.decodeFromVideoDevice(\r\n        selectedDeviceId,\r\n        \"video\",\r\n        (result, err) => {\r\n          if (result) {\r\n            // console.log( result);\r\n            props.setSacanVal(result.toString());\r\n            props.codeReader.reset();\r\n          }\r\n        }\r\n      );\r\n    }\r\n    fetch();\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <div>\r\n        <video id=\"video\" width=\"300\" height=\"300\"></video>\r\n      </div>\r\n      <div onClick={(e) => setIsScanDialogOpen(true)}>המצלמה לא עובדת?</div>\r\n      <Dialog\r\n        open={isScanDialogOpen}\r\n        onClose={() => {\r\n          setIsScanDialogOpen(false);\r\n        }}\r\n        aria-labelledby=\"simple-dialog-title\"\r\n      >\r\n        <FormControl variant=\"outlined\" style={{ width: \"16rem\" }}>\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            lang=\"he\"\r\n            value={selectedDeviceId}\r\n            onChange={async (event: React.ChangeEvent<{ value: unknown }>) => {\r\n              props.codeReader.reset();\r\n              setselectedDeviceId(event.target.value as string);\r\n              props.codeReader.reset();\r\n              await props.codeReader.decodeFromVideoDevice(\r\n                selectedDeviceId,\r\n                \"video\",\r\n                (result, err) => {\r\n                  if (result) {\r\n                    // console.log(result);\r\n                    props.setSacanVal(result.toString());\r\n                    props.codeReader.reset();\r\n                  }\r\n                }\r\n              );\r\n            }}\r\n          >\r\n            {selectedDevices.map((device, index) => (\r\n              <MenuItem key={`menuitem${index}`} value={device}>\r\n                מצלמה {index + 1}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BarcodeScannerAndSelection;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./scanQrStyle.css\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// import { GPS } from \"helpers/types\";\r\n\r\nimport BarcodeScannerAndSelection from \"./BarcodeScannerAndSelection\";\r\nimport { DecodeHintType, BrowserMultiFormatReader } from \"@zxing/library\";\r\nconst QrReader = require(\"react-qr-reader\");\r\n\r\nfunction ScanQr(): any {\r\n  const [result, setResult] = useState<string | null>(\"\");\r\n  // const [gps, setGPS] = useState<GPS>({ lat: 0, lon: 0 });\r\n  const [scannedValue, setScannedValue] = useState<string>(\"\");\r\n  const deley = 100;\r\n  // const history = useHistory();\r\n  const hints = new Map();\r\n\r\n  const formats = Array.from(Array(17).keys());\r\n  hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\r\n  let codeReader: BrowserMultiFormatReader = new BrowserMultiFormatReader(\r\n    hints\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   navigator.geolocation.getCurrentPosition(function (position) {\r\n  //     setGPS({\r\n  //       lat: position.coords.latitude,\r\n  //       lon: position.coords.longitude,\r\n  //     });\r\n  //   });\r\n  // }, []);\r\n\r\n  const handleError = (err: any) => {\r\n    console.error(err);\r\n  };\r\n\r\n  const handleScan = (data: string) => {\r\n    if (data !== null) {\r\n      setResult(data);\r\n      console.log(\"good\");\r\n      // history.push({\r\n      //   pathname: \"/destination\",\r\n      //   // search: '?query=abc',\r\n      //   // state: { gps: gps },\r\n      // });\r\n    } else console.log(\"trying\");\r\n  };\r\n  const previewStyle = {\r\n    width: 250,\r\n    display: \"inline-block\",\r\n    marginTop: \"0.7rem\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"scan-qr\">\r\n      <h1 className=\"title\">סרקו את קוד ה - QR</h1>\r\n      <h2 className=\"description\">קוד הQR נמצא באמצעי התחבורה עליו עליתם</h2>\r\n      {/* <div className=\"corner\">\r\n        <QrReader\r\n          delay={deley}\r\n          style={previewStyle}\r\n          onError={handleError}\r\n          onScan={handleScan}\r\n          showViewFinder={false}\r\n        />\r\n      </div> */}\r\n      <BarcodeScannerAndSelection\r\n        codeReader={codeReader}\r\n        setSacanVal={(val: string) => {\r\n          console.log(val);\r\n          setScannedValue(val);\r\n          handleScan(val);\r\n        }}\r\n      />\r\n      <p>{result}</p>\r\n      <h2 className=\"help\">לחצו כאן לעזרה</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScanQr;\r\n","import { useRef, useState } from \"react\";\r\nimport QrReader from \"react-qr-reader\";\r\nimport { useTorchLight } from \"@blackbox-vision/use-torch-light\";\r\nimport Torch from \"./Torch\";\r\nimport ScanQr from \"./camera/ScanQr\";\r\n\r\nimport BarcodeScannerComponent from \"react-webcam-barcode-scanner2\";\r\nimport React from \"react\";\r\nfunction App() {\r\n  const [data, setData] = React.useState(\"Not Found\");\r\n\r\n  return (\r\n    <>\r\n      <ScanQr />\r\n      {/* <Torch /> */}\r\n\r\n      {/* <QrReader\r\n        onLoad={setRef}\r\n        onScan={setData}\r\n        onError={setError}\r\n        style={{ width: \"100%\" }}\r\n      /> */}\r\n      {/* <button onClick={toggle}>{on ? \"Disable Torch\" : \"Enable Torch\"}</button> */}\r\n      {/* <p>{JSON.stringify(data, null, 2)}</p>\r\n      <p>{JSON.stringify(error, null, 2)}</p> */}\r\n      {/* <BarcodeScannerComponent\r\n        width={500}\r\n        height={500}\r\n        onUpdate={(err, result) => {\r\n          if (result) setData(result.text);\r\n          else setData(\"Not Found\");\r\n        }}\r\n      />\r\n      <p>{data}</p> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}