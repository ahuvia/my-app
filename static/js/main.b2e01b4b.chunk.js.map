{"version":3,"sources":["Torch.js","camera/ScanQr.tsx","App.js","reportWebVitals.js","index.js"],"names":["Torch","SUPPORTS_MEDIA_DEVICES","navigator","useState","mediaDevices","enumerateDevices","then","devices","cameras","filter","device","kind","length","camera","getUserMedia","video","deviceId","facingMode","height","ideal","width","stream","track","getVideoTracks","ImageCapture","getPhotoCapabilities","state","document","querySelector","addEventListener","applyConstraints","advanced","torch","className","require","App","useEffect","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iPAsFeA,MApFf,WAEE,IAAMC,EAAyB,iBAAkBC,UAFlC,EAGSC,oBAAS,GAHlB,mBA6Ef,OA7Ee,UAKXF,GAEFC,UAAUE,aAAaC,mBAAmBC,MAAK,SAACC,GAC9C,IAAMC,EAAUD,EAAQE,QAAO,SAACC,GAAD,MAA4B,eAAhBA,EAAOC,QAElD,GAAuB,IAAnBH,EAAQI,OACV,KAAM,kCAER,IAAMC,EAASL,EAAQA,EAAQI,OAAS,GAGxCV,UAAUE,aACPU,aAAa,CACZC,MAAO,CACLC,SAAUH,EAAOG,SACjBC,WAAY,CAAC,OAAQ,eACrBC,OAAQ,CAAEC,MAAO,MACjBC,MAAO,CAAED,MAAO,SAGnBb,MAAK,SAACe,GACL,IAAMC,EAAQD,EAAOE,iBAAiB,GAGjB,IAAIC,aAAaF,GAEnCG,uBACAnB,MAAK,WA6BJ,IAAIoB,GAAQ,EAEAC,SAASC,cAAc,WAC/BC,iBAAiB,SAAS,WAC5BH,GAASA,EACTJ,EAAMQ,iBAAiB,CACrBC,SAAU,CAAC,CAAEC,MAAON,kBAWlC,8BACE,wBAAQO,UAAU,SAAlB,yB,8CC1EWC,EAAQ,K,aCKZA,EAAQ,KAmHNC,MAjHf,WAAgB,IAAD,EACWhC,mBAAS,aADpB,mBA0Db,OA1Da,UAsDbiC,qBAAU,cAGP,IAED,gCAGE,qBAAKC,GAAG,SAOR,sBAAKA,GAAG,UAAR,UAME,wBACEA,GAAG,WAIL,kCACE,uBADF,uBAIA,0BAIF,cAAC,EAAD,QC1FSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrB,SAASsB,eAAe,SAM1BX,K","file":"static/js/main.b2e01b4b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Torch() {\r\n  //Test browser support\r\n  const SUPPORTS_MEDIA_DEVICES = \"mediaDevices\" in navigator;\r\n  const [isOn, setIsOn] = useState(false);\r\n\r\n  if (SUPPORTS_MEDIA_DEVICES) {\r\n    //Get the environment camera (usually the second one)\r\n    navigator.mediaDevices.enumerateDevices().then((devices) => {\r\n      const cameras = devices.filter((device) => device.kind === \"videoinput\");\r\n\r\n      if (cameras.length === 0) {\r\n        throw \"No camera found on this device.\";\r\n      }\r\n      const camera = cameras[cameras.length - 1];\r\n\r\n      // Create stream and get video track\r\n      navigator.mediaDevices\r\n        .getUserMedia({\r\n          video: {\r\n            deviceId: camera.deviceId,\r\n            facingMode: [\"user\", \"environment\"],\r\n            height: { ideal: 1080 },\r\n            width: { ideal: 1920 },\r\n          },\r\n        })\r\n        .then((stream) => {\r\n          const track = stream.getVideoTracks()[0];\r\n\r\n          //Create image capture object and get camera capabilities\r\n          const imageCapture = new ImageCapture(track);\r\n          const photoCapabilities = imageCapture\r\n            .getPhotoCapabilities()\r\n            .then(() => {\r\n              // //todo: check if camera has a torch\r\n              // // if (isOn) {\r\n              // //   //let there be light!\r\n              // //   setIsOn(false);\r\n              // //   const btn = document.querySelector(\".switch\");\r\n              // //   btn.addEventListener(\"click\", function () {\r\n              // //     track.applyConstraints({\r\n              // //       advanced: [{ torch: false }],\r\n              // //     });\r\n              // //   });\r\n              // // } else {\r\n              // //   //let there be light!\r\n              // //   setIsOn(true);\r\n              // //   const btn = document.querySelector(\".switch\");\r\n              // //   btn.addEventListener(\"click\", function () {\r\n              // //     track.applyConstraints({\r\n              // //       advanced: [{ torch: true }],\r\n              // //     });\r\n              // //   });\r\n              // // }\r\n              //let there be light!\r\n              // const btn = document.querySelector(\".switch\");\r\n              // btn.addEventListener(\"click\", function () {\r\n              //   track.applyConstraints({\r\n              //     advanced: [{ torch: true }],\r\n              //   });\r\n              // });\r\n              //todo: check if camera has a torch\r\n              let state = false;\r\n              //let there be light!\r\n              const btn = document.querySelector(\".switch\");\r\n              btn.addEventListener(\"click\", function () {\r\n                state = !state;\r\n                track.applyConstraints({\r\n                  advanced: [{ torch: state }],\r\n                });\r\n              });\r\n            });\r\n        });\r\n    });\r\n\r\n    //The light will be on as long the track exists\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"switch\">On / Off</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Torch;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./scanQrStyle.css\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// import { GPS } from \"helpers/types\";\r\n\r\nimport BarcodeScannerAndSelection from \"./BarcodeScannerAndSelection\";\r\nimport { DecodeHintType, BrowserMultiFormatReader } from \"@zxing/library\";\r\nconst QrReader = require(\"react-qr-reader\");\r\n\r\nfunction ScanQr(): any {\r\n  const [result, setResult] = useState<string | null>(\"\");\r\n  // const [gps, setGPS] = useState<GPS>({ lat: 0, lon: 0 });\r\n  const [scannedValue, setScannedValue] = useState<string>(\"\");\r\n  const deley = 100;\r\n  // const history = useHistory();\r\n  const hints = new Map();\r\n\r\n  const formats = Array.from(Array(17).keys());\r\n  hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\r\n  let codeReader: BrowserMultiFormatReader = new BrowserMultiFormatReader(\r\n    hints\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   navigator.geolocation.getCurrentPosition(function (position) {\r\n  //     setGPS({\r\n  //       lat: position.coords.latitude,\r\n  //       lon: position.coords.longitude,\r\n  //     });\r\n  //   });\r\n  // }, []);\r\n\r\n  const handleError = (err: any) => {\r\n    console.error(err);\r\n  };\r\n\r\n  const handleScan = (data: string) => {\r\n    if (data !== null) {\r\n      setResult(data);\r\n      console.log(\"good\");\r\n      // history.push({\r\n      //   pathname: \"/destination\",\r\n      //   // search: '?query=abc',\r\n      //   // state: { gps: gps },\r\n      // });\r\n    } else console.log(\"trying\");\r\n  };\r\n  const previewStyle = {\r\n    width: 250,\r\n    display: \"inline-block\",\r\n    marginTop: \"0.7rem\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"scan-qr\">\r\n      <h1 className=\"title\">סרקו את קוד ה - QR</h1>\r\n      <h2 className=\"description\">קוד הQR נמצא באמצעי התחבורה עליו עליתם</h2>\r\n      {/* <div className=\"corner\">\r\n        <QrReader\r\n          delay={deley}\r\n          style={previewStyle}\r\n          onError={handleError}\r\n          onScan={handleScan}\r\n          showViewFinder={false}\r\n        />\r\n      </div> */}\r\n      <BarcodeScannerAndSelection\r\n        codeReader={codeReader}\r\n        setSacanVal={(val: string) => {\r\n          console.log(val);\r\n          setScannedValue(val);\r\n          handleScan(val);\r\n        }}\r\n      />\r\n      <p>{result}</p>\r\n      <h2 className=\"help\">לחצו כאן לעזרה</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScanQr;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport QrReader from \"react-scan-qr\";\r\nimport jsQR from \"jsqr\";\r\nimport JsQr from \"./JsQr\";\r\nimport JsQR2 from \"./jsQR2\";\r\n// import { useTorchLight } from \"@blackbox-vision/use-torch-light\";\r\n import Torch from \"./Torch\";\r\nimport ScanQr from \"./camera/ScanQr\";\r\nimport \"./icon.css\";\r\n// import BarcodeScannerComponent from \"react-webcam-barcode-scanner2\";\r\nimport React from \"react\";\r\nimport ZxingBrower from \"./zxingBrower\";\r\nconst tiny = require(\"@ahuvia/tiny\");\r\n\r\nfunction App() {\r\n  const [data, setData] = useState(\"Not Found\");\r\n\r\n  const handleError = (err) => {\r\n    console.error(err);\r\n  };\r\n  const width = 400;\r\n  const height = 400;\r\n  const tryy = async () => {\r\n    // var video = document.querySelector(\"#videoElement\");\r\n    const mediaStream = await navigator.mediaDevices.getUserMedia({\r\n      video: { facingMode: \"environment\" \r\n      , frameRate: { ideal: 24, max: 30 }}\r\n    });\r\n    // const video = document.createElement(\"video\");\r\n    const video = document.getElementById(\"vid\");\r\n\r\n    if (\"srcObject\" in video) {\r\n      video.srcObject = mediaStream;\r\n    } else {\r\n      video.src = URL.createObjectURL(mediaStream);\r\n    }\r\n\r\n    const currentDiv = document.getElementById(\"div1\");\r\n    video.autoplay = true;\r\n    // currentDiv.appendChild(video);\r\n  };\r\n\r\n  const canvas = () => {\r\n    var canvas = document.getElementById(\"canvas\");\r\n    var ctx = canvas.getContext(\"2d\");\r\n    var video = document.getElementById(\"vid\");\r\n\r\n    // set canvas size = video size when known\r\n    video.addEventListener(\"loadedmetadata\", function () {\r\n      canvas.width = video.videoWidth;\r\n      canvas.height = video.videoHeight;\r\n    });\r\n\r\n    video.addEventListener(\r\n      \"play\",\r\n      function () {\r\n        var $this = this; //cache\r\n        (function loop() {\r\n          if (!$this.paused && !$this.ended) {\r\n            ctx.drawImage($this, 0, 0);\r\n            setTimeout(loop, 1000 / 30); // drawing at 30fps\r\n          }\r\n        })();\r\n      },\r\n      0\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    // tryy();\r\n    // canvas();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      {/* <JsQr /> */}\r\n      {/* <JsQR2/> */}\r\n      <div id=\"div1\"></div>\r\n      {/* <video\r\n        style={{ width: \"500px\", height: \"375px\", backgroundColor: \"#666\" }}\r\n        autoPlay={true}\r\n        id=\"vid\"\r\n      ></video> */}\r\n\r\n      <div id=\"theater\">\r\n        {/* <video\r\n          id=\"video\"\r\n          src=\"http://upload.wikimedia.org/wikipedia/commons/7/79/Big_Buck_Bunny_small.ogv\"\r\n          controls=\"false\"\r\n        ></video> */}\r\n        <canvas\r\n          id=\"canvas\"\r\n          // src=\"http://upload.wikimedia.org/wikipedia/commons/7/79/Big_Buck_Bunny_small.ogv\"\r\n          // controls=\"false\"\r\n        ></canvas>\r\n        <label>\r\n          <br />\r\n          Try to play me :)\r\n        </label>\r\n        <br />\r\n      </div>\r\n      {/* {tiny(\"אהוביה שני\")} */}\r\n      {/* <ScanQr /> */}\r\n      <Torch />\r\n      {/* <QrReader\r\n        delay={300}\r\n        onScan={(data) => setData(data)}\r\n        onError={handleError(data)}\r\n        style={{ width: \"90%\" }}\r\n      />\r\n      {data} */}\r\n      {/* <ZxingBrower/> */}\r\n      {/* <button onClick={toggle}>{on ? \"Disable Torch\" : \"Enable Torch\"}</button> */}\r\n      {/* <p>{JSON.stringify(data, null, 2)}</p>\r\n      <p>{JSON.stringify(error, null, 2)}</p> */}\r\n      {/* <BarcodeScannerComponent\r\n        width={500}\r\n        height={500}\r\n        onUpdate={(err, result) => {\r\n          if (result) setData(result.text);\r\n          else setData(\"Not Found\");\r\n        }}\r\n      />\r\n      // <p>{data}</p> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}