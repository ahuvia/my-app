{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","streamRef","useRef","useState","show","setShow","data","setData","console","info","current","useTorchLight","debug","vibrate","on","toggle","className","onClick","style","marginBottom","resolution","facingMode","onLoad","stream","onScan","decoded","onError","err","marginTop","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MA4CeA,MAvCf,WACE,IAAMC,EAAYC,iBAAO,MADZ,EAEWC,oBAAS,GAFpB,mBAENC,EAFM,KAEAC,EAFA,OAGWF,mBAAS,QAHpB,mBAGNG,EAHM,KAGAC,EAHA,KAKbC,QAAQC,KAAKR,EAAUS,SALV,MAOQC,YAAcV,EAAUS,QAAS,CACpDE,OAAO,EACPC,QAAS,MATE,mBAONC,EAPM,KAOFC,EAPE,KAYb,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQC,QAAS,kBAAMZ,GAASD,IAAOc,MAAO,CAAEC,aAAc,IAA9D,SACGf,EAAO,oBAAsB,oBAE/BA,GACC,cAAC,IAAD,CACEgB,WAAY,IACZC,WAAW,cACXC,OAAQ,gBAAGC,EAAH,EAAGA,OAAH,OAAiBtB,EAAUS,QAAUa,GAC7CC,OAAQ,SAACC,GAAD,OAAalB,EAAQkB,IAC7BC,QAAS,SAACC,GAAD,OAASnB,QAAQC,KAAKkB,MAGnC,yBAAQV,QAASF,EAAQG,MAAO,CAAEU,UAAW,IAA7C,UACGd,EAAK,UAAY,SADpB,kBAGA,8BACE,oDACsB,IACH,kBAATR,EAAoBuB,KAAKC,UAAUxB,GAAQA,WCzB9CyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8c071be7.chunk.js","sourcesContent":["import { useRef, useState } from \"react\";\nimport { QrReader } from \"@blackbox-vision/react-qr-reader\";\nimport { useTorchLight } from \"@blackbox-vision/use-torch-light\";\nimport Troch from \"./Troch\";\n\nfunction App() {\n  const streamRef = useRef(null);\n  const [show, setShow] = useState(true);\n  const [data, setData] = useState(\"NULL\");\n\n  console.info(streamRef.current);\n\n  const [on, toggle] = useTorchLight(streamRef.current, {\n    debug: true,\n    vibrate: 200,\n  });\n\n  return (\n    <div className=\"App\">\n      <button onClick={() => setShow(!show)} style={{ marginBottom: 16 }}>\n        {show ? \"Unmount QR Reader\" : \"Mount QR Reader\"}\n      </button>\n      {show && (\n        <QrReader\n          resolution={600}\n          facingMode=\"environment\"\n          onLoad={({ stream }) => (streamRef.current = stream)}\n          onScan={(decoded) => setData(decoded)}\n          onError={(err) => console.info(err)}\n        />\n      )}\n      <button onClick={toggle} style={{ marginTop: 16 }}>\n        {on ? \"Disable\" : \"Enable\"} Torch Light\n      </button>\n      <div>\n        <p>\n          El valor del QR es:{\" \"}\n          {typeof data === \"object\" ? JSON.stringify(data) : data}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}