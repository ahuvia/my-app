{"version":3,"sources":["camera/ScanQr.tsx","camera.js","App.js","reportWebVitals.js","index.js"],"names":["require","Camera","constraints","window","audio","video","handleSuccess","stream","document","querySelector","videoTracks","getVideoTracks","console","log","label","srcObject","handleError","error","name","v","errorMsg","width","exact","height","msg","innerHTML","e","a","navigator","mediaDevices","getUserMedia","target","disabled","addEventListener","init","id","autoplay","playsinline","App","useState","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4SAOiBA,EAAQ,K,aCLV,SAASC,IACtB,IAAMC,EAAcC,OAAOD,YAAc,CACvCE,OAAO,EACPC,OAAO,GAET,SAASC,EAAcC,GACrB,IAAMF,EAAQG,SAASC,cAAc,SAC/BC,EAAcH,EAAOI,iBAC3BC,QAAQC,IAAI,+BAAgCX,GAC5CU,QAAQC,IAAR,8BAAmCH,EAAY,GAAGI,QAClDX,OAAOI,OAASA,EAChBF,EAAMU,UAAYR,EAGpB,SAASS,EAAYC,GACnB,GAAmB,gCAAfA,EAAMC,KAAwC,CAChD,IAAMC,EAAIjB,EAAYG,MACtBe,EAAS,kBAAD,OAAmBD,EAAEE,MAAMC,MAA3B,YAAoCH,EAAEI,OAAOD,MAA7C,6CACgB,0BAAfL,EAAMC,MACfE,EAAS,yJAIXA,EAAS,uBAAD,OAAwBH,EAAMC,MAAQD,GAGhD,SAASG,EAASI,EAAKP,GACAT,SAASC,cAAc,aAC/BgB,WAAb,aAAgCD,EAAhC,QACqB,qBAAVP,GACTL,QAAQK,MAAMA,GA9Ba,4CAkC/B,WAAoBS,GAApB,SAAAC,EAAA,+EAEyBC,UAAUC,aAAaC,aAAa5B,GAF7D,OAGII,EAHJ,QAIIoB,EAAEK,OAAOC,UAAW,EAJxB,gDAMIhB,EAAY,EAAD,IANf,0DAlC+B,sBA6C/B,OADAR,SAASC,cAAc,cAAcwB,iBAAiB,SAAS,SAAAP,GAAC,OA5CjC,2CA4CqCQ,CAAKR,MAEvE,gCACC,uBAAOS,GAAG,YAAYC,UAAQ,EAACC,aAAW,IAC3C,wBAAQF,GAAG,YAAX,4BCrCSnC,EAAQ,KAoHNsC,MAlHf,WAAgB,IAAD,EACWC,mBAAS,aADpB,mBA0Db,OA1Da,UAsDbC,qBAAU,cAGP,IAED,gCACE,cAACvC,EAAD,IAGA,qBAAKkC,GAAG,SAOR,sBAAKA,GAAG,UAAR,UAME,wBACEA,GAAG,WAIL,kCACE,uBADF,uBAIA,8BCxFOM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5C,SAAS6C,eAAe,SAM1BZ,K","file":"static/js/main.f8e7d60d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./scanQrStyle.css\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// import { GPS } from \"helpers/types\";\r\n\r\nimport BarcodeScannerAndSelection from \"./BarcodeScannerAndSelection\";\r\nimport { DecodeHintType, BrowserMultiFormatReader } from \"@zxing/library\";\r\nconst QrReader = require(\"react-qr-reader\");\r\n\r\nfunction ScanQr(): any {\r\n  const [result, setResult] = useState<string | null>(\"\");\r\n  // const [gps, setGPS] = useState<GPS>({ lat: 0, lon: 0 });\r\n  const [scannedValue, setScannedValue] = useState<string>(\"\");\r\n  const deley = 100;\r\n  // const history = useHistory();\r\n  const hints = new Map();\r\n\r\n  const formats = Array.from(Array(17).keys());\r\n  hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\r\n  let codeReader: BrowserMultiFormatReader = new BrowserMultiFormatReader(\r\n    hints\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   navigator.geolocation.getCurrentPosition(function (position) {\r\n  //     setGPS({\r\n  //       lat: position.coords.latitude,\r\n  //       lon: position.coords.longitude,\r\n  //     });\r\n  //   });\r\n  // }, []);\r\n\r\n  const handleError = (err: any) => {\r\n    console.error(err);\r\n  };\r\n\r\n  const handleScan = (data: string) => {\r\n    if (data !== null) {\r\n      setResult(data);\r\n      console.log(\"good\");\r\n      // history.push({\r\n      //   pathname: \"/destination\",\r\n      //   // search: '?query=abc',\r\n      //   // state: { gps: gps },\r\n      // });\r\n    } else console.log(\"trying\");\r\n  };\r\n  const previewStyle = {\r\n    width: 250,\r\n    display: \"inline-block\",\r\n    marginTop: \"0.7rem\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"scan-qr\">\r\n      <h1 className=\"title\">סרקו את קוד ה - QR</h1>\r\n      <h2 className=\"description\">קוד הQR נמצא באמצעי התחבורה עליו עליתם</h2>\r\n      {/* <div className=\"corner\">\r\n        <QrReader\r\n          delay={deley}\r\n          style={previewStyle}\r\n          onError={handleError}\r\n          onScan={handleScan}\r\n          showViewFinder={false}\r\n        />\r\n      </div> */}\r\n      <BarcodeScannerAndSelection\r\n        codeReader={codeReader}\r\n        setSacanVal={(val: string) => {\r\n          console.log(val);\r\n          setScannedValue(val);\r\n          handleScan(val);\r\n        }}\r\n      />\r\n      <p>{result}</p>\r\n      <h2 className=\"help\">לחצו כאן לעזרה</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScanQr;\r\n","import React from 'react'\r\n\r\nexport default function Camera() {\r\n  const constraints = window.constraints = {\r\n    audio: false,\r\n    video: true\r\n  };\r\n  function handleSuccess(stream) {\r\n    const video = document.querySelector('video');\r\n    const videoTracks = stream.getVideoTracks();\r\n    console.log('Got stream with constraints:', constraints);\r\n    console.log(`Using video device: ${videoTracks[0].label}`);\r\n    window.stream = stream; // make variable available to browser console\r\n    video.srcObject = stream;\r\n  }\r\n  \r\n  function handleError(error) {\r\n    if (error.name === 'ConstraintNotSatisfiedError') {\r\n      const v = constraints.video;\r\n      errorMsg(`The resolution ${v.width.exact}x${v.height.exact} px is not supported by your device.`);\r\n    } else if (error.name === 'PermissionDeniedError') {\r\n      errorMsg('Permissions have not been granted to use your camera and ' +\r\n        'microphone, you need to allow the page access to your devices in ' +\r\n        'order for the demo to work.');\r\n    }\r\n    errorMsg(`getUserMedia error: ${error.name}`, error);\r\n  }\r\n  \r\n  function errorMsg(msg, error) {\r\n    const errorElement = document.querySelector('#errorMsg');\r\n    errorElement.innerHTML += `<p>${msg}</p>`;\r\n    if (typeof error !== 'undefined') {\r\n      console.error(error);\r\n    }\r\n  }\r\n  \r\n  async function init(e) {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n      handleSuccess(stream);\r\n      e.target.disabled = true;\r\n    } catch (e) {\r\n      handleError(e);\r\n    }\r\n  }\r\n  \r\n  document.querySelector('#showVideo').addEventListener('click', e => init(e));\r\n  return (\r\n    <div>\r\n     <video id=\"gum-local\" autoplay playsinline></video>\r\n    <button id=\"showVideo\">Open camera</button>\r\n      {/* <canvas id=\"canvass\" width=\"350\" height=\"350\"></canvas> */}\r\n    </div>\r\n    \r\n  )\r\n}\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport QrReader from \"react-scan-qr\";\r\nimport jsQR from \"jsqr\";\r\nimport JsQr from \"./JsQr\";\r\nimport JsQR2 from \"./jsQR2\";\r\n// import { useTorchLight } from \"@blackbox-vision/use-torch-light\";\r\n import Torch2 from \"./Torch2\";\r\nimport ScanQr from \"./camera/ScanQr\";\r\nimport \"./icon.css\";\r\n// import BarcodeScannerComponent from \"react-webcam-barcode-scanner2\";\r\nimport React from \"react\";\r\nimport ZxingBrower from \"./zxingBrower\";\r\nimport Camera from \"./camera\";\r\nconst tiny = require(\"@ahuvia/tiny\");\r\n\r\nfunction App() {\r\n  const [data, setData] = useState(\"Not Found\");\r\n\r\n  const handleError = (err) => {\r\n    console.error(err);\r\n  };\r\n  const width = 400;\r\n  const height = 400;\r\n  const tryy = async () => {\r\n    // var video = document.querySelector(\"#videoElement\");\r\n    const mediaStream = await navigator.mediaDevices.getUserMedia({\r\n      video: { facingMode: \"environment\" \r\n      , frameRate: { ideal: 24, max: 30 }}\r\n    });\r\n    // const video = document.createElement(\"video\");\r\n    const video = document.getElementById(\"vid\");\r\n\r\n    if (\"srcObject\" in video) {\r\n      video.srcObject = mediaStream;\r\n    } else {\r\n      video.src = URL.createObjectURL(mediaStream);\r\n    }\r\n\r\n    const currentDiv = document.getElementById(\"div1\");\r\n    video.autoplay = true;\r\n    // currentDiv.appendChild(video);\r\n  };\r\n\r\n  const canvas = () => {\r\n    var canvas = document.getElementById(\"canvas\");\r\n    var ctx = canvas.getContext(\"2d\");\r\n    var video = document.getElementById(\"vid\");\r\n\r\n    // set canvas size = video size when known\r\n    video.addEventListener(\"loadedmetadata\", function () {\r\n      canvas.width = video.videoWidth;\r\n      canvas.height = video.videoHeight;\r\n    });\r\n\r\n    video.addEventListener(\r\n      \"play\",\r\n      function () {\r\n        var $this = this; //cache\r\n        (function loop() {\r\n          if (!$this.paused && !$this.ended) {\r\n            ctx.drawImage($this, 0, 0);\r\n            setTimeout(loop, 1000 / 30); // drawing at 30fps\r\n          }\r\n        })();\r\n      },\r\n      0\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    // tryy();\r\n    // canvas();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Camera/>\r\n      {/* <JsQr /> */}\r\n      {/* <JsQR2/> */}\r\n      <div id=\"div1\"></div>\r\n      {/* <video\r\n        style={{ width: \"500px\", height: \"375px\", backgroundColor: \"#666\" }}\r\n        autoPlay={true}\r\n        id=\"vid\"\r\n      ></video> */}\r\n\r\n      <div id=\"theater\">\r\n        {/* <video\r\n          id=\"video\"\r\n          src=\"http://upload.wikimedia.org/wikipedia/commons/7/79/Big_Buck_Bunny_small.ogv\"\r\n          controls=\"false\"\r\n        ></video> */}\r\n        <canvas\r\n          id=\"canvas\"\r\n          // src=\"http://upload.wikimedia.org/wikipedia/commons/7/79/Big_Buck_Bunny_small.ogv\"\r\n          // controls=\"false\"\r\n        ></canvas>\r\n        <label>\r\n          <br />\r\n          Try to play me :)\r\n        </label>\r\n        <br />\r\n      </div>\r\n      {/* {tiny(\"אהוביה שני\")} */}\r\n      {/* <ScanQr /> */}\r\n      {/* <Torch2 /> */}\r\n      {/* <QrReader\r\n        delay={300}\r\n        onScan={(data) => setData(data)}\r\n        onError={handleError(data)}\r\n        style={{ width: \"90%\" }}\r\n      />\r\n      {data} */}\r\n      {/* <ZxingBrower/> */}\r\n      {/* <button onClick={toggle}>{on ? \"Disable Torch\" : \"Enable Torch\"}</button> */}\r\n      {/* <p>{JSON.stringify(data, null, 2)}</p>\r\n      <p>{JSON.stringify(error, null, 2)}</p> */}\r\n      {/* <BarcodeScannerComponent\r\n        width={500}\r\n        height={500}\r\n        onUpdate={(err, result) => {\r\n          if (result) setData(result.text);\r\n          else setData(\"Not Found\");\r\n        }}\r\n      />\r\n      // <p>{data}</p> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}