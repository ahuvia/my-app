{"version":3,"sources":["Troch.js","App.js","reportWebVitals.js","index.js"],"names":["Troch","navigator","mediaDevices","enumerateDevices","then","devices","cameras","filter","device","kind","length","camera","getUserMedia","video","deviceId","facingMode","height","ideal","width","stream","track","getVideoTracks","ImageCapture","getPhotoCapabilities","btn","document","querySelector","torch","addEventListener","applyConstraints","advanced","className","App","streamRef","useRef","useState","console","info","current","useTorchLight","debug","vibrate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oMAgEeA,MA9Df,WAuDE,MArD+B,iBAAkBC,WAI/CA,UAAUC,aAAaC,mBAAmBC,MAAK,SAACC,GAC9C,IAAMC,EAAUD,EAAQE,QAAO,SAACC,GAAD,MAA4B,eAAhBA,EAAOC,QAElD,GAAuB,IAAnBH,EAAQI,OACV,KAAM,kCAER,IAAMC,EAASL,EAAQA,EAAQI,OAAS,GAGxCT,UAAUC,aACPU,aAAa,CACZC,MAAO,CACLC,SAAUH,EAAOG,SACjBC,WAAY,CAAC,OAAQ,eACrBC,OAAQ,CAAEC,MAAO,MACjBC,MAAO,CAAED,MAAO,SAGnBb,MAAK,SAACe,GACL,IAAMC,EAAQD,EAAOE,iBAAiB,GAGjB,IAAIC,aAAaF,GAEnCG,uBACAnB,MAAK,WAGJ,IAAMoB,EAAMC,SAASC,cAAc,WAC/BF,EAAIG,MACNH,EAAII,iBAAiB,SAAS,WAC5BR,EAAMS,iBAAiB,CACrBC,SAAU,CAAC,CAAEH,OAAO,SAIxBH,EAAII,iBAAiB,SAAS,WAC5BR,EAAMS,iBAAiB,CACrBC,SAAU,CAAC,CAAEH,OAAO,kBAYpC,8BACE,wBAAQI,UAAU,SAAlB,yBCdSC,MAxCf,WACE,IAAMC,EAAYC,iBAAO,MADZ,EAEWC,oBAAS,GAFpB,gCAGWA,mBAAS,SAHpB,6BAKbC,QAAQC,KAAKJ,EAAUK,SALV,MAOQC,YAAcN,EAAUK,QAAS,CACpDE,OAAO,EACPC,QAAS,MATE,mBAYb,OAZa,UAaX,qBAAKV,UAAU,MAAf,SACE,cAAC,EAAD,OCPSW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxC,MAAK,YAAkD,IAA/CyC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAAS4B,eAAe,SAM1BX,M","file":"static/js/main.50585f4b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Troch() {\r\n  //Test browser support\r\n  const SUPPORTS_MEDIA_DEVICES = \"mediaDevices\" in navigator;\r\n\r\n  if (SUPPORTS_MEDIA_DEVICES) {\r\n    //Get the environment camera (usually the second one)\r\n    navigator.mediaDevices.enumerateDevices().then((devices) => {\r\n      const cameras = devices.filter((device) => device.kind === \"videoinput\");\r\n\r\n      if (cameras.length === 0) {\r\n        throw \"No camera found on this device.\";\r\n      }\r\n      const camera = cameras[cameras.length - 1];\r\n\r\n      // Create stream and get video track\r\n      navigator.mediaDevices\r\n        .getUserMedia({\r\n          video: {\r\n            deviceId: camera.deviceId,\r\n            facingMode: [\"user\", \"environment\"],\r\n            height: { ideal: 1080 },\r\n            width: { ideal: 1920 },\r\n          },\r\n        })\r\n        .then((stream) => {\r\n          const track = stream.getVideoTracks()[0];\r\n\r\n          //Create image capture object and get camera capabilities\r\n          const imageCapture = new ImageCapture(track);\r\n          const photoCapabilities = imageCapture\r\n            .getPhotoCapabilities()\r\n            .then(() => {\r\n              //todo: check if camera has a torch\r\n              //let there be light!\r\n              const btn = document.querySelector(\".switch\");\r\n              if (btn.torch) {\r\n                btn.addEventListener(\"click\", function () {\r\n                  track.applyConstraints({\r\n                    advanced: [{ torch: false }],\r\n                  });\r\n                });\r\n              } else {\r\n                btn.addEventListener(\"click\", function () {\r\n                  track.applyConstraints({\r\n                    advanced: [{ torch: true }],\r\n                  });\r\n                });\r\n              }\r\n            });\r\n        });\r\n    });\r\n\r\n    //The light will be on as long the track exists\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"switch\">On / Off</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Troch;\r\n","import { useRef, useState } from \"react\";\nimport { QrReader } from \"@blackbox-vision/react-qr-reader\";\nimport { useTorchLight } from \"@blackbox-vision/use-torch-light\";\nimport Troch from \"./Troch\";\n\nfunction App() {\n  const streamRef = useRef(null);\n  const [show, setShow] = useState(true);\n  const [data, setData] = useState(\"NULL\");\n\n  console.info(streamRef.current);\n\n  const [on, toggle] = useTorchLight(streamRef.current, {\n    debug: true,\n    vibrate: 200,\n  });\n\n  return (\n    <div className=\"App\">\n      <Troch />\n      {/* <button onClick={() => setShow(!show)} style={{ marginBottom: 16 }}>\n        {show ? \"Unmount QR Reader\" : \"Mount QR Reader\"}\n      </button>\n      {show && (\n        <QrReader\n          resolution={600}\n          facingMode=\"environment\"\n          onLoad={({ stream }) => (streamRef.current = stream)}\n          onScan={(decoded) => setData(decoded)}\n          onError={(err) => console.info(err)}\n        />\n      )}\n      <button onClick={toggle} style={{ marginTop: 16 }}>\n        {on ? \"Disable\" : \"Enable\"} Torch Light\n      </button>\n      <div>\n        <p>\n          El valor del QR es:{\" \"}\n          {typeof data === \"object\" ? JSON.stringify(data) : data}\n        </p>\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}