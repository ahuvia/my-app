{"version":3,"sources":["ReactQrReader.js","App.js","reportWebVitals.js","index.js"],"names":["ReactQrReader","props","state","delay","result","handleScan","bind","this","setState","err","console","error","style","height","width","onError","handleError","onScan","showViewFinder","margin","Component","require","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OA+CeA,E,kDA3Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,IACPC,OAAQ,aAGV,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAPD,E,8CASnB,SAAWF,GACLA,GACFG,KAAKC,SAAS,CAAEJ,a,yBAGpB,SAAYK,GACVC,QAAQC,MAAMF,K,oBAEhB,WAME,OACE,gCACE,cAAC,IAAD,CACEN,MAAOI,KAAKL,MAAMC,MAClBS,MATe,CACnBC,OAAQ,IACRC,MAAO,KAQHC,QAASR,KAAKS,YACdC,OAAQV,KAAKF,WACba,gBAAgB,IAElB,uBACA,uBACA,uBACA,uBACA,uBACA,mBAAGN,MAAO,CAAEO,OAAQ,OAAQL,MAAO,OAAnC,SAA6CP,KAAKL,MAAME,gB,GAtCpCgB,aCDfC,EAAQ,IAWNC,MATf,WAEE,OACE,8BACE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4c5d4821.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport QrReader from \"react-qr-reader\";\r\n\r\nclass ReactQrReader extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      delay: 500,\r\n      result: \"No result\",\r\n    };\r\n\r\n    this.handleScan = this.handleScan.bind(this);\r\n  }\r\n  handleScan(result) {\r\n    if (result) {\r\n      this.setState({ result });\r\n    }\r\n  }\r\n  handleError(err) {\r\n    console.error(err);\r\n  }\r\n  render() {\r\n    const previewStyle = {\r\n      height: 240,\r\n      width: 320,\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <QrReader\r\n          delay={this.state.delay}\r\n          style={previewStyle}\r\n          onError={this.handleError}\r\n          onScan={this.handleScan}\r\n          showViewFinder={false}\r\n        />\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <p style={{ margin: \"auto\", width: \"50%\" }}>{this.state.result}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ReactQrReader;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport ReactQrReader from './ReactQrReader'\r\nconst tiny = require(\"@ahuvia/tiny\");\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <div>\r\n      <ReactQrReader/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}