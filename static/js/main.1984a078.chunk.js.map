{"version":3,"sources":["ReactQrReader.js","Torch.js","App.js","reportWebVitals.js","index.js"],"names":["Component","Torch","SUPPORTS_MEDIA_DEVICES","navigator","useState","mediaDevices","enumerateDevices","then","devices","cameras","filter","device","kind","length","camera","getUserMedia","video","deviceId","facingMode","height","ideal","width","stream","track","getVideoTracks","ImageCapture","getPhotoCapabilities","state","document","querySelector","addEventListener","applyConstraints","advanced","torch","className","require","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8OAG4BA,Y,OCmFbC,MApFf,WAEE,IAAMC,EAAyB,iBAAkBC,UAFlC,EAGSC,oBAAS,GAHlB,mBA6Ef,OA7Ee,UAKXF,GAEFC,UAAUE,aAAaC,mBAAmBC,MAAK,SAACC,GAC9C,IAAMC,EAAUD,EAAQE,QAAO,SAACC,GAAD,MAA4B,eAAhBA,EAAOC,QAElD,GAAuB,IAAnBH,EAAQI,OACV,KAAM,kCAER,IAAMC,EAASL,EAAQA,EAAQI,OAAS,GAGxCV,UAAUE,aACPU,aAAa,CACZC,MAAO,CACLC,SAAUH,EAAOG,SACjBC,WAAY,CAAC,OAAQ,eACrBC,OAAQ,CAAEC,MAAO,MACjBC,MAAO,CAAED,MAAO,SAGnBb,MAAK,SAACe,GACL,IAAMC,EAAQD,EAAOE,iBAAiB,GAGjB,IAAIC,aAAaF,GAEnCG,uBACAnB,MAAK,WA6BJ,IAAIoB,GAAQ,EAEAC,SAASC,cAAc,WAC/BC,iBAAiB,SAAS,WAC5BH,GAASA,EACTJ,EAAMQ,iBAAiB,CACrBC,SAAU,CAAC,CAAEC,MAAON,kBAWlC,8BACE,wBAAQO,UAAU,SAAlB,yBC9EOC,EAAQ,IAYNC,MAVf,WAEE,OACE,8BAEE,cAAC,EAAD,OCESC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnB,SAASoB,eAAe,SAM1BX,M","file":"static/js/main.1984a078.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport QrReader from \"react-qr-reader\";\r\n\r\nclass ReactQrReader extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      delay: 500,\r\n      result: \"No result\",\r\n    };\r\n\r\n    this.handleScan = this.handleScan.bind(this);\r\n  }\r\n  handleScan(result) {\r\n    if (result) {\r\n      this.setState({ result });\r\n    }\r\n  }\r\n  handleError(err) {\r\n    console.error(err);\r\n  }\r\n  render() {\r\n    const previewStyle = {\r\n      height: 240,\r\n      width: 320,\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <QrReader\r\n          delay={this.state.delay}\r\n          style={previewStyle}\r\n          onError={this.handleError}\r\n          onScan={this.handleScan}\r\n          showViewFinder={false}\r\n        />\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <p style={{ margin: \"auto\", width: \"50%\" }}>{this.state.result}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ReactQrReader;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction Torch() {\r\n  //Test browser support\r\n  const SUPPORTS_MEDIA_DEVICES = \"mediaDevices\" in navigator;\r\n  const [isOn, setIsOn] = useState(false);\r\n\r\n  if (SUPPORTS_MEDIA_DEVICES) {\r\n    //Get the environment camera (usually the second one)\r\n    navigator.mediaDevices.enumerateDevices().then((devices) => {\r\n      const cameras = devices.filter((device) => device.kind === \"videoinput\");\r\n\r\n      if (cameras.length === 0) {\r\n        throw \"No camera found on this device.\";\r\n      }\r\n      const camera = cameras[cameras.length - 1];\r\n\r\n      // Create stream and get video track\r\n      navigator.mediaDevices\r\n        .getUserMedia({\r\n          video: {\r\n            deviceId: camera.deviceId,\r\n            facingMode: [\"user\", \"environment\"],\r\n            height: { ideal: 1080 },\r\n            width: { ideal: 1920 },\r\n          },\r\n        })\r\n        .then((stream) => {\r\n          const track = stream.getVideoTracks()[0];\r\n\r\n          //Create image capture object and get camera capabilities\r\n          const imageCapture = new ImageCapture(track);\r\n          const photoCapabilities = imageCapture\r\n            .getPhotoCapabilities()\r\n            .then(() => {\r\n              // //todo: check if camera has a torch\r\n              // // if (isOn) {\r\n              // //   //let there be light!\r\n              // //   setIsOn(false);\r\n              // //   const btn = document.querySelector(\".switch\");\r\n              // //   btn.addEventListener(\"click\", function () {\r\n              // //     track.applyConstraints({\r\n              // //       advanced: [{ torch: false }],\r\n              // //     });\r\n              // //   });\r\n              // // } else {\r\n              // //   //let there be light!\r\n              // //   setIsOn(true);\r\n              // //   const btn = document.querySelector(\".switch\");\r\n              // //   btn.addEventListener(\"click\", function () {\r\n              // //     track.applyConstraints({\r\n              // //       advanced: [{ torch: true }],\r\n              // //     });\r\n              // //   });\r\n              // // }\r\n              //let there be light!\r\n              // const btn = document.querySelector(\".switch\");\r\n              // btn.addEventListener(\"click\", function () {\r\n              //   track.applyConstraints({\r\n              //     advanced: [{ torch: true }],\r\n              //   });\r\n              // });\r\n              //todo: check if camera has a torch\r\n              let state = false;\r\n              //let there be light!\r\n              const btn = document.querySelector(\".switch\");\r\n              btn.addEventListener(\"click\", function () {\r\n                state = !state;\r\n                track.applyConstraints({\r\n                  advanced: [{ torch: state }],\r\n                });\r\n              });\r\n            });\r\n        });\r\n    });\r\n\r\n    //The light will be on as long the track exists\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"switch\">On / Off</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Torch;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport ReactQrReader from './ReactQrReader'\r\nimport Torch from \"./Torch\";\r\nconst tiny = require(\"@ahuvia/tiny\");\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <div>\r\n      {/* <ReactQrReader/> */}\r\n      <Torch/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}