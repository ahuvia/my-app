{"version":3,"sources":["JsQr.js","camera/ScanQr.tsx","App.js","reportWebVitals.js","index.js"],"names":["JsQr","document","getElementById","useState","qr","setqr","captureArea","useEffect","webcam","a","navigator","mediaDevices","getUserMedia","video","facingMode","mediaStream","videoTag","srcObject","src","URL","createObjectURL","canvasTag","setInterval","ctx","getContext","drawImage","strokeStyle","strokeRect","imageData","getImageData","data","qrCode","jsQR","console","log","id","width","height","autoPlay","require","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"yQAEe,SAASA,IACLC,SAASC,eAAe,UACvBD,SAASC,eAAe,WAD1C,IAD6B,EAGTC,mBAAS,IAHA,mBAGtBC,EAHsB,KAGlBC,EAHkB,KAIvBC,EACD,IADCA,EAED,GAFCA,EAGG,IAHHA,EAII,IAEVC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAM,uCAAG,gCAAAC,EAAA,sEACaC,UAAUC,aAAaC,aAAa,CAC5DC,MAAO,CAAEC,WAAY,iBAFV,OACPC,EADO,OAKT,cADEC,EAAWf,SAASC,eAAe,WAEvCc,EAASC,UAAYF,EAErBC,EAASE,IAAMC,IAAIC,gBAAgBL,GAG/BM,EAAYpB,SAASC,eAAe,WAC1CoB,aAAY,WACV,IAAIC,EAAMF,EAAUG,WAAW,MAC/BD,EAAIE,UAAUT,EAAU,EAAG,EAAG,IAAK,KACnCO,EAAIG,YAAc,MAElBH,EAAII,WACFrB,EACAA,EACAA,EACAA,KAED,KAEHgB,aAAY,WACV,IAAIM,EAAYP,EACbG,WAAW,MACXK,aACCvB,EACAA,EACAA,EACAA,GACAwB,KAGEC,EAASC,IAAKJ,EAAWtB,EAAmBA,GAE9CyB,IACFE,QAAQC,IAAIH,GACZ1B,EAAM0B,EAAOD,SAKd,KA7CU,2CAAH,qDAgDZ,OACE,gCACE,wBAAQK,GAAG,UAAUC,MAAM,MAAMC,OAAO,QACvCjC,EACD,uBAAO+B,GAAG,SAASC,MAAM,MAAMC,OAAO,MAAMC,UAAQ,O,8CC7DzCC,EAAQ,K,aCIZA,EAAQ,KAiHNC,MA/Gf,WAAgB,IAAD,EACWrC,mBAAS,aADpB,mBAyDb,OAzDa,UAqDbI,qBAAU,cAGP,IAED,gCACE,cAACP,EAAD,IACA,qBAAKmC,GAAG,SAOR,sBAAKA,GAAG,UAAR,UAME,wBACEA,GAAG,WAIL,kCACE,uBADF,uBAIA,8BCnFOM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnD,SAASC,eAAe,SAM1BuC,K","file":"static/js/main.b6b9c55b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport jsQR from \"jsqr\";\r\nexport default function JsQr() {\r\n  const videoTag = document.getElementById(\"videoo\");\r\n  const canvasTag = document.getElementById(\"canvass\");\r\n  const [qr, setqr] = useState(\"\");\r\n  const captureArea = {\r\n    x: 100,\r\n    y: 60,\r\n    width: 120,\r\n    height: 120,\r\n  };\r\n  useEffect(() => {\r\n    webcam();\r\n  }, []);\r\n\r\n  const webcam = async () => {\r\n    const mediaStream = await navigator.mediaDevices.getUserMedia({\r\n      video: { facingMode: \"environment\" },\r\n    });\r\n    const videoTag = document.getElementById(\"videoo\");\r\n    if (\"srcObject\" in videoTag) {\r\n      videoTag.srcObject = mediaStream;\r\n    } else {\r\n      videoTag.src = URL.createObjectURL(mediaStream);\r\n    }\r\n\r\n    const canvasTag = document.getElementById(\"canvass\");\r\n    setInterval(() => {\r\n      let ctx = canvasTag.getContext(\"2d\");\r\n      ctx.drawImage(videoTag, 0, 0, 320, 240);\r\n      ctx.strokeStyle = \"red\";\r\n\r\n      ctx.strokeRect(\r\n        captureArea.x,\r\n        captureArea.y,\r\n        captureArea.width,\r\n        captureArea.height\r\n      );\r\n    }, 100);\r\n\r\n    setInterval(() => {\r\n      let imageData = canvasTag\r\n        .getContext(\"2d\")\r\n        .getImageData(\r\n          captureArea.x,\r\n          captureArea.y,\r\n          captureArea.width,\r\n          captureArea.height\r\n        ).data;\r\n\r\n      // parsing qr code from canvas\r\n      const qrCode = jsQR(imageData, captureArea.width, captureArea.height);\r\n\r\n      if (qrCode) {\r\n        console.log(qrCode);\r\n        setqr(qrCode.data);\r\n        // router.redirect(Router.pages.result, qrCode);\r\n        // let resultPage = document.querySelector('#result .qr-code-data');\r\n        // resultPage.innerHTML = qrCode.data;\r\n      }\r\n    }, 100);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <canvas id=\"canvass\" width=\"320\" height=\"240\"></canvas>\r\n      {qr}\r\n      <video id=\"videoo\" width=\"320\" height=\"240\" autoPlay></video>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./scanQrStyle.css\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// import { GPS } from \"helpers/types\";\r\n\r\nimport BarcodeScannerAndSelection from \"./BarcodeScannerAndSelection\";\r\nimport { DecodeHintType, BrowserMultiFormatReader } from \"@zxing/library\";\r\nconst QrReader = require(\"react-qr-reader\");\r\n\r\nfunction ScanQr(): any {\r\n  const [result, setResult] = useState<string | null>(\"\");\r\n  // const [gps, setGPS] = useState<GPS>({ lat: 0, lon: 0 });\r\n  const [scannedValue, setScannedValue] = useState<string>(\"\");\r\n  const deley = 100;\r\n  // const history = useHistory();\r\n  const hints = new Map();\r\n\r\n  const formats = Array.from(Array(17).keys());\r\n  hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\r\n  let codeReader: BrowserMultiFormatReader = new BrowserMultiFormatReader(\r\n    hints\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   navigator.geolocation.getCurrentPosition(function (position) {\r\n  //     setGPS({\r\n  //       lat: position.coords.latitude,\r\n  //       lon: position.coords.longitude,\r\n  //     });\r\n  //   });\r\n  // }, []);\r\n\r\n  const handleError = (err: any) => {\r\n    console.error(err);\r\n  };\r\n\r\n  const handleScan = (data: string) => {\r\n    if (data !== null) {\r\n      setResult(data);\r\n      console.log(\"good\");\r\n      // history.push({\r\n      //   pathname: \"/destination\",\r\n      //   // search: '?query=abc',\r\n      //   // state: { gps: gps },\r\n      // });\r\n    } else console.log(\"trying\");\r\n  };\r\n  const previewStyle = {\r\n    width: 250,\r\n    display: \"inline-block\",\r\n    marginTop: \"0.7rem\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"scan-qr\">\r\n      <h1 className=\"title\">סרקו את קוד ה - QR</h1>\r\n      <h2 className=\"description\">קוד הQR נמצא באמצעי התחבורה עליו עליתם</h2>\r\n      {/* <div className=\"corner\">\r\n        <QrReader\r\n          delay={deley}\r\n          style={previewStyle}\r\n          onError={handleError}\r\n          onScan={handleScan}\r\n          showViewFinder={false}\r\n        />\r\n      </div> */}\r\n      <BarcodeScannerAndSelection\r\n        codeReader={codeReader}\r\n        setSacanVal={(val: string) => {\r\n          console.log(val);\r\n          setScannedValue(val);\r\n          handleScan(val);\r\n        }}\r\n      />\r\n      <p>{result}</p>\r\n      <h2 className=\"help\">לחצו כאן לעזרה</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScanQr;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport QrReader from \"react-scan-qr\";\r\nimport jsQR from \"jsqr\";\r\nimport JsQr from \"./JsQr\";\r\n// import { useTorchLight } from \"@blackbox-vision/use-torch-light\";\r\n// import Torch from \"./Torch\";\r\nimport ScanQr from \"./camera/ScanQr\";\r\nimport \"./icon.css\";\r\n// import BarcodeScannerComponent from \"react-webcam-barcode-scanner2\";\r\nimport React from \"react\";\r\nimport ZxingBrower from \"./zxingBrower\";\r\nconst tiny = require(\"@ahuvia/tiny\");\r\n\r\nfunction App() {\r\n  const [data, setData] = useState(\"Not Found\");\r\n\r\n  const handleError = (err) => {\r\n    console.error(err);\r\n  };\r\n  const width = 400;\r\n  const height = 400;\r\n  const tryy = async () => {\r\n    // var video = document.querySelector(\"#videoElement\");\r\n    const mediaStream = await navigator.mediaDevices.getUserMedia({\r\n      video: { facingMode: \"environment\" },\r\n    });\r\n    // const video = document.createElement(\"video\");\r\n    const video = document.getElementById(\"vid\");\r\n\r\n    if (\"srcObject\" in video) {\r\n      video.srcObject = mediaStream;\r\n    } else {\r\n      video.src = URL.createObjectURL(mediaStream);\r\n    }\r\n\r\n    const currentDiv = document.getElementById(\"div1\");\r\n    video.autoplay = true;\r\n    // currentDiv.appendChild(video);\r\n  };\r\n\r\n  const canvas = () => {\r\n    var canvas = document.getElementById(\"canvas\");\r\n    var ctx = canvas.getContext(\"2d\");\r\n    var video = document.getElementById(\"vid\");\r\n\r\n    // set canvas size = video size when known\r\n    video.addEventListener(\"loadedmetadata\", function () {\r\n      canvas.width = video.videoWidth;\r\n      canvas.height = video.videoHeight;\r\n    });\r\n\r\n    video.addEventListener(\r\n      \"play\",\r\n      function () {\r\n        var $this = this; //cache\r\n        (function loop() {\r\n          if (!$this.paused && !$this.ended) {\r\n            ctx.drawImage($this, 0, 0);\r\n            setTimeout(loop, 1000 / 30); // drawing at 30fps\r\n          }\r\n        })();\r\n      },\r\n      0\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    // tryy();\r\n    // canvas();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <JsQr />\r\n      <div id=\"div1\"></div>\r\n      {/* <video\r\n        style={{ width: \"500px\", height: \"375px\", backgroundColor: \"#666\" }}\r\n        autoPlay={true}\r\n        id=\"vid\"\r\n      ></video> */}\r\n\r\n      <div id=\"theater\">\r\n        {/* <video\r\n          id=\"video\"\r\n          src=\"http://upload.wikimedia.org/wikipedia/commons/7/79/Big_Buck_Bunny_small.ogv\"\r\n          controls=\"false\"\r\n        ></video> */}\r\n        <canvas\r\n          id=\"canvas\"\r\n          // src=\"http://upload.wikimedia.org/wikipedia/commons/7/79/Big_Buck_Bunny_small.ogv\"\r\n          // controls=\"false\"\r\n        ></canvas>\r\n        <label>\r\n          <br />\r\n          Try to play me :)\r\n        </label>\r\n        <br />\r\n      </div>\r\n      {/* {tiny(\"אהוביה שני\")} */}\r\n      {/* <ScanQr /> */}\r\n      {/* <Torch /> */}\r\n      {/* <QrReader\r\n        delay={300}\r\n        onScan={(data) => setData(data)}\r\n        onError={handleError(data)}\r\n        style={{ width: \"90%\" }}\r\n      />\r\n      {data} */}\r\n      {/* <ZxingBrower/> */}\r\n      {/* <button onClick={toggle}>{on ? \"Disable Torch\" : \"Enable Torch\"}</button> */}\r\n      {/* <p>{JSON.stringify(data, null, 2)}</p>\r\n      <p>{JSON.stringify(error, null, 2)}</p> */}\r\n      {/* <BarcodeScannerComponent\r\n        width={500}\r\n        height={500}\r\n        onUpdate={(err, result) => {\r\n          if (result) setData(result.text);\r\n          else setData(\"Not Found\");\r\n        }}\r\n      />\r\n      // <p>{data}</p> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}