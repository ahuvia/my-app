{"version":3,"sources":["JsQr.tsx","ReactQrReader.js","App.js","reportWebVitals.js","index.js"],"names":["JsQr","mediaStream","useState","torch","setTorch","qr","setqr","captureArea","useEffect","webcam","a","constraints","video","facingMode","zoom","width","height","optimizationMode","frameRate","advanced","navigator","mediaDevices","getUserMedia","alert","message","track","getVideoTracks","console","log","getSettings","videoTag","document","getElementById","autoplay","setAttribute","srcObject","state","applyConstraints","imageCapture","ImageCapture","getPhotoCapabilities","then","querySelector","addEventListener","canvasTag","createElement","setInterval","getContext","drawImage","window","screen","imageData","getImageData","data","qrCode","jsQR","style","textAlign","id","className","Component","require","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wOAEe,SAASA,IAAQ,IAG1BC,EAHyB,EACHC,oBAAS,GADN,mBACtBC,EADsB,KACfC,EADe,OAETF,mBAAS,kCAFA,mBAEtBG,EAFsB,KAElBC,EAFkB,KAIvBC,EACD,EADCA,EAED,EAFCA,EAGG,IAHHA,EAII,IAEVC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAM,uCAAG,oCAAAC,EAAA,6DACPC,EAAc,CAClBC,MAAO,CACLC,WAA6B,cAC5BC,KAAM,EACNC,MAAO,IACPC,OAAQ,IACXC,iBAAiB,SACjBC,UAAW,IACXC,SAAU,CAAC,CAAChB,MAAOA,KATR,kBAYMiB,UAAUC,aAAaC,aAAaX,GAZ1C,OAYdV,EAZc,uDAcjBsB,MAAM,kHAAyB,KAAEC,SAdhB,QAiBPC,EAAQxB,EAAYyB,iBAAiB,GAC3CC,QAAQC,IAAKH,EAAMI,gBAEbC,EAAWC,SAASC,eAAe,WAChCC,UAAW,EAIpBH,EAASI,aAAa,YAAY,GAElCJ,EAASI,aAAa,SAAS,GAE/BJ,EAASI,aAAa,eAAe,GAErCJ,EAASK,UAAYlC,EAER,WACX,IAAImC,GAAQ,EACZA,GAASA,EAENL,SAASC,eAAe,SAASG,UAAUT,iBAAiB,GAAGW,iBAAiB,CAAElB,SAAU,CAAC,CAAEhB,MAAOiC,OAItGE,EAAe,IAAIC,aAAad,GACZa,EACvBE,uBACAC,MAAK,WAAQ,IAAIL,GAAQ,EAEbL,SAASW,cAAc,WAC/BC,iBAAiB,SAAS,WAC5BP,GAASA,EACVhC,GAAUD,GACTsB,EAAMY,iBAAiB,CAErBlB,SAAU,CAAC,CAAEhB,MAAOiC,aAKtBQ,EAAYb,SAASc,cAAc,WAC7B9B,MAAQ,IAClB6B,EAAU5B,OAAS,IACnB8B,aAAY,WACAF,EAAUG,WAAW,MAG3BC,UACFlB,EACA,EACA,EACCmB,OAAOC,OAAOnC,MAAQ,IAAO,GAC7BkC,OAAOC,OAAOnC,MAAQ,IAAO,IAGhC,IAAIoC,EAAYP,EACbG,WAAW,MACXK,aACC7C,EACAA,EACAA,EACAA,GACA8C,KAGEC,EAASC,IAAKJ,EAAW5C,EAAmBA,GAE9C+C,IACF3B,QAAQC,IAAI0B,GACZhD,EAAMgD,EAAOD,SAId,KA1FU,yDAAH,qDA8FZ,OACE,sBAAKG,MAAO,CAAEC,UAAW,UAAzB,UACE,iDACA,uBAAOC,GAAG,SACTF,MAAO,CAAEzC,MAAO,UAEhB,wBAAS4C,UAAU,SAAnB,gCACA,8BAAMtD,O,4DClHeuD,YCGfC,EAAQ,IAeNC,MAbf,WAEE,OACE,8BAIE,cAAC9D,EAAD,OCHS+D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1C,SAASC,eAAe,SAM1B+B,M","file":"static/js/main.0cf96dd8.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport jsQR from \"jsqr\";\r\nexport default function JsQr() {\r\n  const [torch, setTorch] = useState(false)\r\n  const [qr, setqr] = useState(\"זוזוו\");\r\n  let mediaStream : MediaStream;\r\n  const captureArea = {\r\n    x: 1,\r\n    y: 1,\r\n    width: 289,\r\n    height: 289,\r\n  };\r\n  useEffect(() => {\r\n    webcam();\r\n  }, []);\r\n\r\n  const webcam = async () => {\r\n    const constraints = {\r\n      video: { \r\n        facingMode: ( \"environment\"? \"environment\": \"user\"),\r\n         zoom: 1.0,\r\n         width: 400,//{ min: 1024, ideal: 1280, max: 1920 },\r\n         height: 400,// { min: 576, ideal: 720, max: 1080 },\r\n      optimizationMode:'detail',\r\n      frameRate: 90},\r\n      advanced: [{torch: torch}]\r\n    };\r\ntry{\r\n   mediaStream = await navigator.mediaDevices.getUserMedia(constraints);\r\n}catch(e:any){\r\nalert(\"לא הצלחנו לגשת למצלמה\"+ e.message)\r\n}\r\n    \r\n    const track = mediaStream.getVideoTracks()[0];\r\n    console.log( track.getSettings())\r\n    \r\n    const videoTag = document.getElementById(\"videoo\") as HTMLVideoElement;\r\n    videoTag.autoplay = true;\r\n    // videoTag.height = 290;\r\n    // videoTag.width = 290;\r\n    //@ts-ignore\r\n    videoTag.setAttribute(\"autoplay\", true);\r\n    //@ts-ignore\r\n    videoTag.setAttribute(\"muted\", true);\r\n    //@ts-ignore\r\n    videoTag.setAttribute(\"playsinline\", true);\r\n    // if (\"srcObject\" in videoTag) {\r\n    videoTag.srcObject = mediaStream;\r\n    \r\n    const offOn =()=>{\r\n      let state = false;\r\n      state = !state;\r\n      //@ts-ignore\r\n         document.getElementById('video').srcObject.getVideoTracks()[0].applyConstraints({ advanced: [{ torch: state }] });\r\n    }\r\n  \r\n   //@ts-ignore\r\n   const imageCapture = new ImageCapture(track);\r\n   const photoCapabilities = imageCapture\r\n     .getPhotoCapabilities()\r\n     .then(() => { let state = false;\r\n      //let there be light!\r\n      const btn = document.querySelector(\".switch\") as HTMLElement;\r\n      btn.addEventListener(\"click\", function () {\r\n        state = !state;\r\n       setTorch(!torch)\r\n        track.applyConstraints({\r\n          //@ts-ignore\r\n          advanced: [{ torch: state }],\r\n        });\r\n      });\r\n    });\r\n  \r\n    var canvasTag = document.createElement(\"canvas\");\r\n    canvasTag.width = 350;\r\n    canvasTag.height = 350;\r\n    setInterval(() => {\r\n      let ctx = canvasTag.getContext(\"2d\")!;\r\n      //   console.log(window.screen.width,window.screen.height)\r\n      // console.log(window.screen.width/100*80,1,window.screen.height/100*50)\r\n      ctx.drawImage(\r\n        videoTag,\r\n        0,\r\n        0,\r\n        (window.screen.width / 100) * 80,\r\n        (window.screen.width / 100) * 80\r\n      );\r\n   \r\n      let imageData = canvasTag\r\n        .getContext(\"2d\")!\r\n        .getImageData(\r\n          captureArea.x,\r\n          captureArea.y,\r\n          captureArea.width,\r\n          captureArea.height\r\n        ).data;\r\n\r\n      // parsing qr code from canvas\r\n      const qrCode = jsQR(imageData, captureArea.width, captureArea.height);\r\n\r\n      if (qrCode) {\r\n        console.log(qrCode);\r\n        setqr(qrCode.data);\r\n        // mediaStream.getVideoTracks()[0].stop();\r\n        // mediaStream.getTracks().forEach(track => track.stop())\r\n      }\r\n    }, 100);\r\n  };\r\n\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <div>23/03/22 10:55</div>\r\n      <video id=\"videoo\" \r\n       style={{ width: \"auto\" }}\r\n       ></video>\r\n       <button  className=\"switch\" >פנס</button>\r\n       <div>{qr}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport QrReader from \"react-qr-reader\";\r\n\r\nclass ReactQrReader extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      delay: 500,\r\n      result: \"No result\",\r\n    };\r\n\r\n    this.handleScan = this.handleScan.bind(this);\r\n  }\r\n  handleScan(result) {\r\n    if (result) {\r\n      this.setState({ result });\r\n    }\r\n  }\r\n  handleError(err) {\r\n    console.error(err);\r\n  }\r\n  render() {\r\n    const previewStyle = {\r\n      height: 240,\r\n      width: 320,\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <QrReader\r\n          delay={this.state.delay}\r\n          style={previewStyle}\r\n          onError={this.handleError}\r\n          onScan={this.handleScan}\r\n          showViewFinder={false}\r\n        />\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <p style={{ margin: \"auto\", width: \"50%\" }}>{this.state.result}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ReactQrReader;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport BarcodeDecoder from \"./BarcodeDecoder\";\r\nimport JsQr from \"./JsQr\";\r\nimport Qr_Scanner from \"./Qr_Scanner\";\r\nimport ReactQrReader from './ReactQrReader'\r\nimport Torch from \"./Torch\";\r\nconst tiny = require(\"@ahuvia/tiny\");\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <div>\r\n      {/* <ReactQrReader/> */}\r\n      {/* <Torch/> */}\r\n      {/* <BarcodeDecoder/> */}\r\n      <JsQr/>\r\n      {/* <Qr_Scanner/> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}