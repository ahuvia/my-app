{"version":3,"sources":["Qr_Scanner.tsx","ReactQrReader.js","App.js","reportWebVitals.js","index.js"],"names":["Qr_Scanner","mediaStream","useState","devices","setDevices","cameraId","setcameraId","useEffect","navigator","mediaDevices","enumerateDevices","then","videoSelect","forEach","device","kind","push","deviceId","catch","error","console","log","video","a","getUserMedia","document","getElementById","srcObject","getVideoTracks","applyConstraints","videoTag","autoplay","height","width","setAttribute","onChange","e","value","target","alert","map","deviceInfo","index","Fragment","label","id","Component","require","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"6NAEe,SAASA,IACpB,IAAIC,EAD6B,EAEHC,mBAAS,IAFN,mBAE1BC,EAF0B,KAEjBC,EAFiB,OAGDF,mBAAS,IAHR,mBAG1BG,EAH0B,KAGhBC,EAHgB,KAIjCC,qBAAU,WACNC,UAAUC,aAAaC,mBACtBC,MAAK,SAACR,GACL,IAAMS,EAAoB,GAM1B,OALAT,EAAQU,SAAQ,SAACC,GACK,eAAhBA,EAAOC,MACTH,EAAYI,KAAKF,MAGdF,KAERD,MAAK,SAACR,GACHG,EAAYH,EAAQ,GAAGc,UACvBb,EAAWD,MAEde,OAAM,SAACC,GACNC,QAAQC,IAAIF,QAEf,IAEHZ,qBAAU,WACNe,MACD,CAAChB,IAGJ,IAAMgB,EAAK,uCAAG,4BAAAC,EAAA,sEACUf,UAAUC,aAAae,aAAa,CAACF,MAAO,CAACL,SAAWZ,KADlE,OACVJ,EADU,OAGVwB,SAASC,eAAe,SAASC,UAAUC,iBAAiB,GAAGC,iBAAiB,CAAEP,MAAO,CAACL,SAAWZ,MAC/FyB,EAAWL,SAASC,eAAe,UACpCK,UAAW,EACpBD,EAASE,OAAS,IAClBF,EAASG,MAAQ,IAEjBH,EAASI,aAAa,YAAY,GAElCJ,EAASI,aAAa,SAAS,GAE/BJ,EAASI,aAAa,eAAe,GAErCJ,EAASH,UAAY1B,EAfP,4CAAH,qDAkBb,OACE,gCACI,wCACE,wBACIkC,SAAU,SAAAC,GACR,IAAMC,EAAQD,EAAEE,OAAOD,MACvB/B,EAAa+B,GACbE,MAAMF,IAJZ,SAOKlC,EAAQqC,KAAI,SAACC,EAAkBC,GAAnB,OACX,cAAC,IAAMC,SAAP,UACI,wBAAQN,MAAOI,EAAWxB,SAA1B,SAAqCwB,EAAWG,OAAX,iBAA8BF,MADlDD,EAAWxB,eAKpC,uBAAO4B,GAAG,a,4DC9DMC,YCGfC,EAAQ,IAeNC,MAbf,WAEE,OACE,8BAKE,cAAChD,EAAD,OCJSiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxC,MAAK,YAAkD,IAA/CyC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlC,SAASC,eAAe,SAM1BuB,M","file":"static/js/main.8d410fa4.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\nexport default function Qr_Scanner() {\r\n    let mediaStream : MediaStream;\r\n    const [devices, setDevices] = useState([]);\r\n    const [cameraId, setcameraId] = useState('')\r\n    useEffect(() => {\r\n        navigator.mediaDevices.enumerateDevices()\r\n        .then((devices) => {\r\n          const videoSelect : any = []\r\n          devices.forEach((device) => {\r\n            if (device.kind === 'videoinput') {\r\n              videoSelect.push(device)\r\n            }\r\n          })\r\n          return videoSelect\r\n        })\r\n        .then((devices) => {\r\n            setcameraId(devices[0].deviceId)\r\n            setDevices(devices)\r\n        })\r\n        .catch((error) => {\r\n          console.log(error)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        video()\r\n    }, [setcameraId])\r\n    \r\n\r\n    const video = async ()=>{\r\n        mediaStream = await navigator.mediaDevices.getUserMedia({video: {deviceId : cameraId}});\r\n          //@ts-ignore\r\n        document.getElementById('video').srcObject.getVideoTracks()[0].applyConstraints({ video: {deviceId : cameraId}});\r\n        const videoTag = document.getElementById(\"video\") as HTMLVideoElement;\r\n    videoTag.autoplay = true;\r\n    videoTag.height = 290;\r\n    videoTag.width = 290;\r\n    //@ts-ignore\r\n    videoTag.setAttribute(\"autoplay\", true);\r\n    //@ts-ignore\r\n    videoTag.setAttribute(\"muted\", true);\r\n    //@ts-ignore\r\n    videoTag.setAttribute(\"playsinline\", true);\r\n    // if (\"srcObject\" in videoTag) {\r\n    videoTag.srcObject = mediaStream;\r\n    }\r\n    \r\n  return (\r\n    <div>\r\n        <div>12:00</div>\r\n          <select\r\n              onChange={e => {\r\n                const value = e.target.value\r\n                setcameraId( value)\r\n                alert(value)\r\n              }}\r\n            >\r\n              {devices.map((deviceInfo : any, index) => (\r\n                <React.Fragment key={deviceInfo.deviceId}>\r\n                    <option value={deviceInfo.deviceId}>{deviceInfo.label || `camera ${index}`}</option>\r\n                    </React.Fragment>\r\n              ))}\r\n            </select>\r\n            <video id='video'></video>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from \"react\";\r\nimport QrReader from \"react-qr-reader\";\r\n\r\nclass ReactQrReader extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      delay: 500,\r\n      result: \"No result\",\r\n    };\r\n\r\n    this.handleScan = this.handleScan.bind(this);\r\n  }\r\n  handleScan(result) {\r\n    if (result) {\r\n      this.setState({ result });\r\n    }\r\n  }\r\n  handleError(err) {\r\n    console.error(err);\r\n  }\r\n  render() {\r\n    const previewStyle = {\r\n      height: 240,\r\n      width: 320,\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <QrReader\r\n          delay={this.state.delay}\r\n          style={previewStyle}\r\n          onError={this.handleError}\r\n          onScan={this.handleScan}\r\n          showViewFinder={false}\r\n        />\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <p style={{ margin: \"auto\", width: \"50%\" }}>{this.state.result}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ReactQrReader;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport BarcodeDecoder from \"./BarcodeDecoder\";\r\nimport JsQr from \"./JsQr\";\r\nimport Qr_Scanner from \"./Qr_Scanner\";\r\nimport ReactQrReader from './ReactQrReader'\r\nimport Torch from \"./Torch\";\r\nconst tiny = require(\"@ahuvia/tiny\");\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <div>\r\n      {/* <ReactQrReader/> */}\r\n      {/* <Torch/> */}\r\n      {/* <BarcodeDecoder/> */}\r\n      {/* <JsQr/> */}\r\n      <Qr_Scanner/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}