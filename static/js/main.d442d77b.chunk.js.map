{"version":3,"sources":["camera/ScanQr.tsx","Camera.js","App.js","reportWebVitals.js","index.js"],"names":["require","Camera","useState","qr","setqr","captureArea","constraints","window","audio","video","facingMode","width","height","handleSuccess","stream","document","getElementById","videoTracks","getVideoTracks","console","log","label","srcObject","canvasTag","createElement","setInterval","getContext","drawImage","screen","imageData","getImageData","data","qrCode","jsQR","getTracks","forEach","track","stop","handleError","error","name","v","errorMsg","exact","msg","querySelector","innerHTML","init","e","a","navigator","mediaDevices","getUserMedia","useEffect","id","autoPlay","playsInline","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"uTAOiBA,EAAQ,K,aCLV,SAASC,IAAU,IAAD,EACXC,mBAAS,IADE,mBACxBC,EADwB,KACpBC,EADoB,KAEzBC,EACD,EADCA,EAED,EAFCA,EAGG,IAHHA,EAII,IAEJC,EAAcC,OAAOD,YAAe,CACxCE,OAAO,EACPC,MAAO,CAAEC,WAA6B,cAAuBC,MAAO,IACpEC,OAAQ,MAEV,SAASC,EAAcC,GACrB,IAAML,EAAQM,SAASC,eAAe,UAChCC,EAAcH,EAAOI,iBAC3BC,QAAQC,IAAI,+BAAgCd,GAC5Ca,QAAQC,IAAR,8BAAmCH,EAAY,GAAGI,QAGlDZ,EAAMa,UAAYR,EAClB,IAAIS,EAAYR,SAASS,cAAc,UACvCD,EAAUZ,MAAQ,IAClBY,EAAUX,OAAS,IACnBa,aAAY,WACAF,EAAUG,WAAW,MAE3BC,UACFlB,EACA,EACA,EACCF,OAAOqB,OAAOjB,MAAQ,IAAO,GAC7BJ,OAAOqB,OAAOjB,MAAQ,IAAO,IAGhC,IAAIkB,EAAYN,EACbG,WAAW,MACXI,aACCzB,EACAA,EACAA,EACAA,GACA0B,KAGEC,EAASC,IAAKJ,EAAWxB,EAAmBA,GAE9C2B,IACFb,QAAQC,IAAIY,GACZ5B,EAAM4B,EAAOD,MAEbjB,EAAOoB,YAAYC,SAAQ,SAAAC,GAAK,OAAIA,EAAMC,aAE3C,IAGL,SAASC,EAAYC,GACnB,GAAmB,gCAAfA,EAAMC,KAAwC,CAChD,IAAMC,EAAInC,EAAYG,MACtBiC,EAAS,kBAAD,OACYD,EAAE9B,MAAMgC,MADpB,YAC6BF,EAAE7B,OAAO+B,MADtC,6CAGgB,0BAAfJ,EAAMC,MACfE,EACE,yJAKJA,EAAS,uBAAD,OAAwBH,EAAMC,MAAQD,GAGhD,SAASG,EAASE,EAAKL,GACAxB,SAAS8B,cAAc,aAC/BC,WAAb,aAAgCF,EAAhC,QACqB,qBAAVL,GACTpB,QAAQoB,MAAMA,GA5Ea,SAgFhBQ,EAhFgB,8EAgF/B,WAAoBC,GAApB,SAAAC,EAAA,+EAEyBC,UAAUC,aAAaC,aAAa9C,GAF7D,OAGIO,EAHJ,wDAMIyB,EAAY,EAAD,IANf,0DAhF+B,sBA+F/B,OANAe,qBAAU,WACRN,MACC,IAKD,gCACE,uBAAOO,GAAG,SAASC,UAAQ,EAACC,aAAW,IACvC,wBACEF,GAAG,YACHG,QAAS,SAACT,GAAOD,EAAKC,IAFxB,yBAKC7C,EACD,qBAAKmD,GAAG,gBC7FDtD,EAAQ,KAmHN0D,MAjHf,WAAgB,IAAD,EACWxD,mBAAS,aADpB,mBAyDb,OAzDa,UAqDbmD,qBAAU,cAGP,IAED,gCACE,cAACpD,EAAD,IAGA,qBAAKqD,GAAG,SAOR,sBAAKA,GAAG,UAAR,UAME,wBACEA,GAAG,WAIL,kCACE,uBADF,uBAIA,8BCvFOK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvD,SAASC,eAAe,SAM1B2C,K","file":"static/js/main.d442d77b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./scanQrStyle.css\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// import { GPS } from \"helpers/types\";\r\n\r\nimport BarcodeScannerAndSelection from \"./BarcodeScannerAndSelection\";\r\nimport { DecodeHintType, BrowserMultiFormatReader } from \"@zxing/library\";\r\nconst QrReader = require(\"react-qr-reader\");\r\n\r\nfunction ScanQr(): any {\r\n  const [result, setResult] = useState<string | null>(\"\");\r\n  // const [gps, setGPS] = useState<GPS>({ lat: 0, lon: 0 });\r\n  const [scannedValue, setScannedValue] = useState<string>(\"\");\r\n  const deley = 100;\r\n  // const history = useHistory();\r\n  const hints = new Map();\r\n\r\n  const formats = Array.from(Array(17).keys());\r\n  hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\r\n  let codeReader: BrowserMultiFormatReader = new BrowserMultiFormatReader(\r\n    hints\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   navigator.geolocation.getCurrentPosition(function (position) {\r\n  //     setGPS({\r\n  //       lat: position.coords.latitude,\r\n  //       lon: position.coords.longitude,\r\n  //     });\r\n  //   });\r\n  // }, []);\r\n\r\n  const handleError = (err: any) => {\r\n    console.error(err);\r\n  };\r\n\r\n  const handleScan = (data: string) => {\r\n    if (data !== null) {\r\n      setResult(data);\r\n      console.log(\"good\");\r\n      // history.push({\r\n      //   pathname: \"/destination\",\r\n      //   // search: '?query=abc',\r\n      //   // state: { gps: gps },\r\n      // });\r\n    } else console.log(\"trying\");\r\n  };\r\n  const previewStyle = {\r\n    width: 250,\r\n    display: \"inline-block\",\r\n    marginTop: \"0.7rem\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"scan-qr\">\r\n      <h1 className=\"title\">סרקו את קוד ה - QR</h1>\r\n      <h2 className=\"description\">קוד הQR נמצא באמצעי התחבורה עליו עליתם</h2>\r\n      {/* <div className=\"corner\">\r\n        <QrReader\r\n          delay={deley}\r\n          style={previewStyle}\r\n          onError={handleError}\r\n          onScan={handleScan}\r\n          showViewFinder={false}\r\n        />\r\n      </div> */}\r\n      <BarcodeScannerAndSelection\r\n        codeReader={codeReader}\r\n        setSacanVal={(val: string) => {\r\n          console.log(val);\r\n          setScannedValue(val);\r\n          handleScan(val);\r\n        }}\r\n      />\r\n      <p>{result}</p>\r\n      <h2 className=\"help\">לחצו כאן לעזרה</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScanQr;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport jsQR from \"jsqr\";\r\nexport default function Camera() {\r\n  const [qr, setqr] = useState('')\r\n  const captureArea = {\r\n    x: 1,\r\n    y: 1,\r\n    width: 289,\r\n    height: 289,\r\n  };\r\n  const constraints = window.constraints =  {\r\n    audio: false,\r\n    video: { facingMode: ( \"environment\"? \"environment\": \"user\"),width: 289,\r\n    height: 289},\r\n  };\r\n  function handleSuccess(stream) {\r\n    const video = document.getElementById(\"videoo\");\r\n    const videoTracks = stream.getVideoTracks();\r\n    console.log(\"Got stream with constraints:\", constraints);\r\n    console.log(`Using video device: ${videoTracks[0].label}`);\r\n\r\n    //window.stream = stream; // make variable available to browser console\r\n    video.srcObject = stream;\r\n    var canvasTag = document.createElement(\"canvas\");\r\n    canvasTag.width = 350;\r\n    canvasTag.height = 350;\r\n    setInterval(() => {\r\n      let ctx = canvasTag.getContext(\"2d\");\r\n   \r\n      ctx.drawImage(\r\n        video,\r\n        0,\r\n        0,\r\n        (window.screen.width / 100) * 80,\r\n        (window.screen.width / 100) * 80\r\n      );\r\n    \r\n      let imageData = canvasTag\r\n        .getContext(\"2d\")\r\n        .getImageData(\r\n          captureArea.x,\r\n          captureArea.y,\r\n          captureArea.width,\r\n          captureArea.height\r\n        ).data;\r\n\r\n      // parsing qr code from canvas\r\n      const qrCode = jsQR(imageData, captureArea.width, captureArea.height);\r\n\r\n      if (qrCode) {\r\n        console.log(qrCode);\r\n        setqr(qrCode.data);\r\n        // stream.getVideoTracks()[0].stop();\r\n        stream.getTracks().forEach(track => track.stop())\r\n      }\r\n    }, 10);\r\n  }\r\n\r\n  function handleError(error) {\r\n    if (error.name === \"ConstraintNotSatisfiedError\") {\r\n      const v = constraints.video;\r\n      errorMsg(\r\n        `The resolution ${v.width.exact}x${v.height.exact} px is not supported by your device.`\r\n      );\r\n    } else if (error.name === \"PermissionDeniedError\") {\r\n      errorMsg(\r\n        \"Permissions have not been granted to use your camera and \" +\r\n          \"microphone, you need to allow the page access to your devices in \" +\r\n          \"order for the demo to work.\"\r\n      );\r\n    }\r\n    errorMsg(`getUserMedia error: ${error.name}`, error);\r\n  }\r\n\r\n  function errorMsg(msg, error) {\r\n    const errorElement = document.querySelector(\"#errorMsg\");\r\n    errorElement.innerHTML += `<p>${msg}</p>`;\r\n    if (typeof error !== \"undefined\") {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  async function init(e) {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n      handleSuccess(stream);\r\n      //e.target.disabled = true;\r\n    } catch (e) {\r\n      handleError(e);\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    init()\r\n  }, []);\r\n  \r\n\r\n  // document.querySelector('#showVideo').addEventListener('click', e => init(e));\r\n  return (\r\n    <div>\r\n      <video id=\"videoo\" autoPlay playsInline></video>\r\n      <button\r\n        id=\"showVideo\"\r\n        onClick={(e) => {init(e)}}>\r\n        Open camera\r\n      </button>\r\n      {qr}\r\n      <div id=\"errorMsg\"></div>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport QrReader from \"react-scan-qr\";\r\nimport jsQR from \"jsqr\";\r\nimport JsQr from \"./JsQr\";\r\nimport JsQR2 from \"./jsQR2\";\r\n// import { useTorchLight } from \"@blackbox-vision/use-torch-light\";\r\nimport Torch2 from \"./Torch2\";\r\nimport ScanQr from \"./camera/ScanQr\";\r\nimport \"./icon.css\";\r\n// import BarcodeScannerComponent from \"react-webcam-barcode-scanner2\";\r\nimport React from \"react\";\r\nimport ZxingBrower from \"./zxingBrower\";\r\nimport Camera from \"./Camera\";\r\nconst tiny = require(\"@ahuvia/tiny\");\r\n\r\nfunction App() {\r\n  const [data, setData] = useState(\"Not Found\");\r\n\r\n  const handleError = (err) => {\r\n    console.error(err);\r\n  };\r\n  const width = 400;\r\n  const height = 400;\r\n  const tryy = async () => {\r\n    // var video = document.querySelector(\"#videoElement\");\r\n    const mediaStream = await navigator.mediaDevices.getUserMedia({\r\n      video: { facingMode: \"environment\", frameRate: { ideal: 24, max: 30 } },\r\n    });\r\n    // const video = document.createElement(\"video\");\r\n    const video = document.getElementById(\"vid\");\r\n\r\n    if (\"srcObject\" in video) {\r\n      video.srcObject = mediaStream;\r\n    } else {\r\n      video.src = URL.createObjectURL(mediaStream);\r\n    }\r\n\r\n    const currentDiv = document.getElementById(\"div1\");\r\n    video.autoplay = true;\r\n    // currentDiv.appendChild(video);\r\n  };\r\n\r\n  const canvas = () => {\r\n    var canvas = document.getElementById(\"canvas\");\r\n    var ctx = canvas.getContext(\"2d\");\r\n    var video = document.getElementById(\"vid\");\r\n\r\n    // set canvas size = video size when known\r\n    video.addEventListener(\"loadedmetadata\", function () {\r\n      canvas.width = video.videoWidth;\r\n      canvas.height = video.videoHeight;\r\n    });\r\n\r\n    video.addEventListener(\r\n      \"play\",\r\n      function () {\r\n        var $this = this; //cache\r\n        (function loop() {\r\n          if (!$this.paused && !$this.ended) {\r\n            ctx.drawImage($this, 0, 0);\r\n            setTimeout(loop, 1000 / 30); // drawing at 30fps\r\n          }\r\n        })();\r\n      },\r\n      0\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    // tryy();\r\n    // canvas();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Camera />\r\n      {/* <JsQr /> */}\r\n      {/* <JsQR2/> */}\r\n      <div id=\"div1\"></div>\r\n      {/* <video\r\n        style={{ width: \"500px\", height: \"375px\", backgroundColor: \"#666\" }}\r\n        autoPlay={true}\r\n        id=\"vid\"\r\n      ></video> */}\r\n\r\n      <div id=\"theater\">\r\n        {/* <video\r\n          id=\"video\"\r\n          src=\"http://upload.wikimedia.org/wikipedia/commons/7/79/Big_Buck_Bunny_small.ogv\"\r\n          controls=\"false\"\r\n        ></video> */}\r\n        <canvas\r\n          id=\"canvas\"\r\n          // src=\"http://upload.wikimedia.org/wikipedia/commons/7/79/Big_Buck_Bunny_small.ogv\"\r\n          // controls=\"false\"\r\n        ></canvas>\r\n        <label>\r\n          <br />\r\n          Try to play me :)\r\n        </label>\r\n        <br />\r\n      </div>\r\n      {/* {tiny(\"אהוביה שני\")} */}\r\n      {/* <ScanQr /> */}\r\n      {/* <Torch2 /> */}\r\n      {/* <QrReader\r\n        delay={300}\r\n        onScan={(data) => setData(data)}\r\n        onError={handleError(data)}\r\n        style={{ width: \"90%\" }}\r\n      />\r\n      {data} */}\r\n      {/* <ZxingBrower/> */}\r\n      {/* <button onClick={toggle}>{on ? \"Disable Torch\" : \"Enable Torch\"}</button> */}\r\n      {/* <p>{JSON.stringify(data, null, 2)}</p>\r\n      <p>{JSON.stringify(error, null, 2)}</p> */}\r\n      {/* <BarcodeScannerComponent\r\n        width={500}\r\n        height={500}\r\n        onUpdate={(err, result) => {\r\n          if (result) setData(result.text);\r\n          else setData(\"Not Found\");\r\n        }}\r\n      />\r\n      // <p>{data}</p> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}